{-# LANGUAGE RecordWildCards #-}
-- Script that generates Data.Capnp.BuiltinTypes.Lists.
--
-- That module is mostly a bunch of tedious instances, though we also
-- generate the ListElem class here; see 'header', below.
module Main where

header = unlines
    [ "{-# LANGUAGE TypeFamilies #-}"
    , "module Data.Capnp.BuiltinTypes.Lists where"
    , "-- This module is auto-generated by gen-builtintypes-lists.hs; DO NOT EDIT."
    , ""
    , "import Data.Int"
    , "import Data.ReinterpretCast"
    , "import Data.Word"
    , ""
    , "import qualified Data.Capnp.Message.Generic as GM"
    , "import qualified Data.Capnp.Message.Mutable as MM"
    , "import qualified Data.Capnp.Untyped.Generic as GU"
    , ""
    , "class ListElem e where"
    , "    data List msg e"
    , "    length :: List msg e -> Int"
    , "    index :: (GM.Message m msg, GU.ReadCtx m) => Int -> List msg e -> m e"
    , "    setIndex :: (GU.ReadCtx m, MM.WriteCtx m s) => e -> Int -> List (MM.Message s) e -> m ()"
    , ""
    ]

data InstanceParams = P
    { to      :: String
    , from    :: String
    , typed   :: String
    , untyped :: String
    }


genInstance P{..} = concat
    [ "instance ListElem ", typed, " where\n"
    , "    newtype List msg ", typed, " = List", typed, " (GU.ListOf msg ", untyped, ")\n"
    , "    length (List", typed, " l) = GU.length l\n"
    , "    index i (List", typed, " l) = ", from, " <$> GU.index i l\n"
    , "    setIndex elt i (", dataCon, " l) = GU.setIndex (", to, " elt) i l\n"
    ]
  where
    dataCon = "List" ++ typed

sizes = [8, 16, 32, 64]

intInstance size = P
    { to = "fromIntegral"
    , from = "fromIntegral"
    , typed = "Int" ++ show size
    , untyped = "Word" ++ show size
    }

wordInstance size = P
    { to = "id"
    , from = "id"
    , typed = "Word" ++ show size
    , untyped = "Word" ++ show size
    }

instances =
    (map intInstance sizes) ++
    (map wordInstance sizes) ++
    [ P { to = "floatToWord"
        , from = "wordToFloat"
        , typed = "Float"
        , untyped = "Word32"
        }
    , P { to = "doubleToWord"
        , from = "wordToDouble"
        , typed = "Double"
        , untyped = "Word64"
        }
    , P { to = "id"
        , from = "id"
        , typed = "Bool"
        , untyped = "Bool"
        }
    ]

main = putStrLn $ header ++ concatMap genInstance instances

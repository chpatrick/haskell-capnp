{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
{- |
Module: Capnp.Gen.Aircraft.Pure
Description: High-level generated module for aircraft.capnp
This module is the generated code for aircraft.capnp,
for the high-level api.
-}
module Capnp.Gen.Aircraft.Pure (A320(..), Aircraft(..), Capnp.Gen.ById.X832bcc6686a26d56.Airport(..), B737(..), Bag(..), BenchmarkA(..), CallSequence(..), CallSequence'server_(..),export_CallSequence, Counter(..), CounterAcceptor(..), CounterAcceptor'server_(..),export_CounterAcceptor, CounterFactory(..), CounterFactory'server_(..),export_CounterFactory, Defaults(..), Echo(..), Echo'server_(..),export_Echo, EchoBase(..), EchoBases(..), F16(..), HoldsText(..), HoldsVerEmptyList(..), HoldsVerOneDataList(..), HoldsVerOnePtrList(..), HoldsVerTwoDataList(..), HoldsVerTwoPtrList(..), HoldsVerTwoTwoList(..), HoldsVerTwoTwoPlus(..), Hoth(..), ListStructCapn(..), Nester1Capn(..), PlaneBase(..), RWTestCapn(..), Regression(..), StackingA(..), StackingB(..), StackingRoot(..), VerEmpty(..), VerOneData(..), VerOnePtr(..), VerTwoData(..), VerTwoDataTwoPtr(..), VerTwoPtr(..), VerTwoTwoPlus(..), VoidUnion(..), Wrap2x2(..), Wrap2x2plus(..), WrapEmpty(..), Z(..), Zdata(..), Zdate(..), Zjob(..), Zserver(..), constDate, Capnp.Gen.ById.X832bcc6686a26d56.constEnum, constList, CallSequence'getNumber'params(..), CallSequence'getNumber'results(..), CounterAcceptor'accept'params(..), CounterAcceptor'accept'results(..), CounterFactory'newCounter'params(..), CounterFactory'newCounter'results(..), Echo'echo'params(..), Echo'echo'results(..)
) where
-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: aircraft.capnp
import Data.Int
import Data.Word
import Data.Default (Default(def))
import GHC.Generics (Generic)
import Capnp.Basics.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow(throwM))
import Capnp.TraversalLimit (MonadLimit, evalLimitT)
import Control.Monad (forM_)
import qualified Capnp.Convert as Convert
import qualified Capnp.Message as M'
import qualified Capnp.Untyped as U'
import qualified Capnp.Untyped.Pure as PU'
import qualified Capnp.GenHelpers.Pure as PH'
import qualified Capnp.Classes as C'
import qualified Capnp.Rpc as Rpc
import qualified Capnp.Gen.Capnp.Rpc.Pure as Rpc
import qualified Capnp.GenHelpers.Rpc as RH'
import qualified Data.Vector as V
import qualified Data.ByteString as BS
import qualified Capnp.Gen.ById.X832bcc6686a26d56
data A320
    = A320
        {base :: PlaneBase}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize A320 where
    type Cerial msg A320 = Capnp.Gen.ById.X832bcc6686a26d56.A320 msg
    decerialize raw = do
        A320 <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_A320'base raw >>= C'.decerialize)
instance C'.Marshal A320 where
    marshalInto raw value = do
        case value of
            A320{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_A320'base raw
                C'.marshalInto field_ base
instance C'.Cerialize s A320
instance C'.FromStruct M'.ConstMsg A320 where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.A320 M'.ConstMsg)
instance Default A320 where
    def = PH'.defaultStruct
data Aircraft
    = Aircraft'void
    | Aircraft'b737 (B737)
    | Aircraft'a320 (A320)
    | Aircraft'f16 (F16)
    | Aircraft'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Aircraft where
    type Cerial msg Aircraft = Capnp.Gen.ById.X832bcc6686a26d56.Aircraft msg
    decerialize raw = do
        raw <- Capnp.Gen.ById.X832bcc6686a26d56.get_Aircraft' raw
        case raw of
            Capnp.Gen.ById.X832bcc6686a26d56.Aircraft'void -> pure Aircraft'void
            Capnp.Gen.ById.X832bcc6686a26d56.Aircraft'b737 val -> Aircraft'b737 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Aircraft'a320 val -> Aircraft'a320 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Aircraft'f16 val -> Aircraft'f16 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Aircraft'unknown' val -> pure $ Aircraft'unknown' val
instance C'.Marshal Aircraft where
    marshalInto raw value = do
        case value of
            Aircraft'void -> Capnp.Gen.ById.X832bcc6686a26d56.set_Aircraft'void raw
            Aircraft'b737 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Aircraft'b737 raw
                C'.marshalInto field_ arg_
            Aircraft'a320 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Aircraft'a320 raw
                C'.marshalInto field_ arg_
            Aircraft'f16 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Aircraft'f16 raw
                C'.marshalInto field_ arg_
            Aircraft'unknown' arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Aircraft'unknown' raw arg_
instance C'.Cerialize s Aircraft
instance C'.FromStruct M'.ConstMsg Aircraft where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Aircraft M'.ConstMsg)
instance Default Aircraft where
    def = PH'.defaultStruct
instance C'.Decerialize Capnp.Gen.ById.X832bcc6686a26d56.Airport where
    type Cerial msg Capnp.Gen.ById.X832bcc6686a26d56.Airport = Capnp.Gen.ById.X832bcc6686a26d56.Airport
    decerialize = pure
data B737
    = B737
        {base :: PlaneBase}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize B737 where
    type Cerial msg B737 = Capnp.Gen.ById.X832bcc6686a26d56.B737 msg
    decerialize raw = do
        B737 <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_B737'base raw >>= C'.decerialize)
instance C'.Marshal B737 where
    marshalInto raw value = do
        case value of
            B737{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_B737'base raw
                C'.marshalInto field_ base
instance C'.Cerialize s B737
instance C'.FromStruct M'.ConstMsg B737 where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.B737 M'.ConstMsg)
instance Default B737 where
    def = PH'.defaultStruct
data Bag
    = Bag
        {counter :: Counter}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Bag where
    type Cerial msg Bag = Capnp.Gen.ById.X832bcc6686a26d56.Bag msg
    decerialize raw = do
        Bag <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Bag'counter raw >>= C'.decerialize)
instance C'.Marshal Bag where
    marshalInto raw value = do
        case value of
            Bag{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Bag'counter raw
                C'.marshalInto field_ counter
instance C'.Cerialize s Bag
instance C'.FromStruct M'.ConstMsg Bag where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Bag M'.ConstMsg)
instance Default Bag where
    def = PH'.defaultStruct
data BenchmarkA
    = BenchmarkA
        {name :: Text,
        birthDay :: Int64,
        phone :: Text,
        siblings :: Int32,
        spouse :: Bool,
        money :: Double}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize BenchmarkA where
    type Cerial msg BenchmarkA = Capnp.Gen.ById.X832bcc6686a26d56.BenchmarkA msg
    decerialize raw = do
        BenchmarkA <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'name raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'birthDay raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'phone raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'siblings raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'spouse raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_BenchmarkA'money raw)
instance C'.Marshal BenchmarkA where
    marshalInto raw value = do
        case value of
            BenchmarkA{..} -> do
                field_ <- C'.cerialize (U'.message raw) name
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'name raw field_
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'birthDay raw birthDay
                field_ <- C'.cerialize (U'.message raw) phone
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'phone raw field_
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'siblings raw siblings
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'spouse raw spouse
                Capnp.Gen.ById.X832bcc6686a26d56.set_BenchmarkA'money raw money
instance C'.Cerialize s BenchmarkA
instance C'.FromStruct M'.ConstMsg BenchmarkA where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.BenchmarkA M'.ConstMsg)
instance Default BenchmarkA where
    def = PH'.defaultStruct
newtype CallSequence = CallSequence M'.Client
    deriving(Show, Eq, Read, Generic)
instance C'.Decerialize CallSequence where
    type Cerial msg CallSequence = Capnp.Gen.ById.X832bcc6686a26d56.CallSequence msg
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CallSequence Nothing) = pure $ CallSequence M'.nullClient
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CallSequence (Just cap)) = CallSequence <$> U'.getClient cap
instance C'.Cerialize s CallSequence where
    cerialize msg (CallSequence client) = Capnp.Gen.ById.X832bcc6686a26d56.CallSequence . Just <$> U'.appendCap msg client
class CallSequence'server_ cap where
    {-# MINIMAL callSequence'getNumber #-}
    callSequence'getNumber :: CallSequence'getNumber'params -> cap -> Rpc.RpcT IO (CallSequence'getNumber'results)
    callSequence'getNumber _ _ = Rpc.throwMethodUnimplemented
export_CallSequence :: CallSequence'server_ a => a -> Rpc.RpcT IO CallSequence
export_CallSequence server_ = CallSequence <$> Rpc.export Rpc.Server
    { handleStop = pure () -- TODO
    , handleCall = \interfaceId methodId payload -> case interfaceId of
        12371070827563042848 -> case methodId of
            0 -> do
                RH'.handleMethod server_ callSequence'getNumber payload
            _ -> Rpc.throwMethodUnimplemented
        _ -> Rpc.throwMethodUnimplemented
    }
instance CallSequence'server_ CallSequence where
    callSequence'getNumber args (CallSequence client) = do
        args' <- PH'.createPure maxBound $ Convert.valueToMsg args >>= PH'.getRoot
        resultPromise <- Rpc.call 12371070827563042848 0 (Just (U'.PtrStruct args')) client
        result <- Rpc.waitIO resultPromise
        evalLimitT maxBound $ PH'.convertValue result
data Counter
    = Counter
        {size :: Int64,
        words :: Text,
        wordlist :: PU'.ListOf (Text)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Counter where
    type Cerial msg Counter = Capnp.Gen.ById.X832bcc6686a26d56.Counter msg
    decerialize raw = do
        Counter <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Counter'size raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Counter'words raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Counter'wordlist raw >>= C'.decerialize)
instance C'.Marshal Counter where
    marshalInto raw value = do
        case value of
            Counter{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_Counter'size raw size
                field_ <- C'.cerialize (U'.message raw) words
                Capnp.Gen.ById.X832bcc6686a26d56.set_Counter'words raw field_
                let len_ = V.length wordlist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Counter'wordlist len_ raw
                pure ()
instance C'.Cerialize s Counter
instance C'.FromStruct M'.ConstMsg Counter where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Counter M'.ConstMsg)
instance Default Counter where
    def = PH'.defaultStruct
newtype CounterAcceptor = CounterAcceptor M'.Client
    deriving(Show, Eq, Read, Generic)
instance C'.Decerialize CounterAcceptor where
    type Cerial msg CounterAcceptor = Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor msg
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor Nothing) = pure $ CounterAcceptor M'.nullClient
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor (Just cap)) = CounterAcceptor <$> U'.getClient cap
instance C'.Cerialize s CounterAcceptor where
    cerialize msg (CounterAcceptor client) = Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor . Just <$> U'.appendCap msg client
class CounterAcceptor'server_ cap where
    {-# MINIMAL counterAcceptor'accept #-}
    counterAcceptor'accept :: CounterAcceptor'accept'params -> cap -> Rpc.RpcT IO (CounterAcceptor'accept'results)
    counterAcceptor'accept _ _ = Rpc.throwMethodUnimplemented
export_CounterAcceptor :: CounterAcceptor'server_ a => a -> Rpc.RpcT IO CounterAcceptor
export_CounterAcceptor server_ = CounterAcceptor <$> Rpc.export Rpc.Server
    { handleStop = pure () -- TODO
    , handleCall = \interfaceId methodId payload -> case interfaceId of
        14317498215560924065 -> case methodId of
            0 -> do
                RH'.handleMethod server_ counterAcceptor'accept payload
            _ -> Rpc.throwMethodUnimplemented
        _ -> Rpc.throwMethodUnimplemented
    }
instance CounterAcceptor'server_ CounterAcceptor where
    counterAcceptor'accept args (CounterAcceptor client) = do
        args' <- PH'.createPure maxBound $ Convert.valueToMsg args >>= PH'.getRoot
        resultPromise <- Rpc.call 14317498215560924065 0 (Just (U'.PtrStruct args')) client
        result <- Rpc.waitIO resultPromise
        evalLimitT maxBound $ PH'.convertValue result
newtype CounterFactory = CounterFactory M'.Client
    deriving(Show, Eq, Read, Generic)
instance C'.Decerialize CounterFactory where
    type Cerial msg CounterFactory = Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory msg
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory Nothing) = pure $ CounterFactory M'.nullClient
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory (Just cap)) = CounterFactory <$> U'.getClient cap
instance C'.Cerialize s CounterFactory where
    cerialize msg (CounterFactory client) = Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory . Just <$> U'.appendCap msg client
class CounterFactory'server_ cap where
    {-# MINIMAL counterFactory'newCounter #-}
    counterFactory'newCounter :: CounterFactory'newCounter'params -> cap -> Rpc.RpcT IO (CounterFactory'newCounter'results)
    counterFactory'newCounter _ _ = Rpc.throwMethodUnimplemented
export_CounterFactory :: CounterFactory'server_ a => a -> Rpc.RpcT IO CounterFactory
export_CounterFactory server_ = CounterFactory <$> Rpc.export Rpc.Server
    { handleStop = pure () -- TODO
    , handleCall = \interfaceId methodId payload -> case interfaceId of
        15610220054254702620 -> case methodId of
            0 -> do
                RH'.handleMethod server_ counterFactory'newCounter payload
            _ -> Rpc.throwMethodUnimplemented
        _ -> Rpc.throwMethodUnimplemented
    }
instance CounterFactory'server_ CounterFactory where
    counterFactory'newCounter args (CounterFactory client) = do
        args' <- PH'.createPure maxBound $ Convert.valueToMsg args >>= PH'.getRoot
        resultPromise <- Rpc.call 15610220054254702620 0 (Just (U'.PtrStruct args')) client
        result <- Rpc.waitIO resultPromise
        evalLimitT maxBound $ PH'.convertValue result
data Defaults
    = Defaults
        {text :: Text,
        data_ :: Data,
        float :: Float,
        int :: Int32,
        uint :: Word32}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Defaults where
    type Cerial msg Defaults = Capnp.Gen.ById.X832bcc6686a26d56.Defaults msg
    decerialize raw = do
        Defaults <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Defaults'text raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Defaults'data_ raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Defaults'float raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Defaults'int raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Defaults'uint raw)
instance C'.Marshal Defaults where
    marshalInto raw value = do
        case value of
            Defaults{..} -> do
                field_ <- C'.cerialize (U'.message raw) text
                Capnp.Gen.ById.X832bcc6686a26d56.set_Defaults'text raw field_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Defaults'data_ (BS.length data_) raw
                C'.marshalInto field_ data_
                Capnp.Gen.ById.X832bcc6686a26d56.set_Defaults'float raw float
                Capnp.Gen.ById.X832bcc6686a26d56.set_Defaults'int raw int
                Capnp.Gen.ById.X832bcc6686a26d56.set_Defaults'uint raw uint
instance C'.Cerialize s Defaults
instance C'.FromStruct M'.ConstMsg Defaults where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Defaults M'.ConstMsg)
instance Default Defaults where
    def = PH'.defaultStruct
newtype Echo = Echo M'.Client
    deriving(Show, Eq, Read, Generic)
instance C'.Decerialize Echo where
    type Cerial msg Echo = Capnp.Gen.ById.X832bcc6686a26d56.Echo msg
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.Echo Nothing) = pure $ Echo M'.nullClient
    decerialize (Capnp.Gen.ById.X832bcc6686a26d56.Echo (Just cap)) = Echo <$> U'.getClient cap
instance C'.Cerialize s Echo where
    cerialize msg (Echo client) = Capnp.Gen.ById.X832bcc6686a26d56.Echo . Just <$> U'.appendCap msg client
class Echo'server_ cap where
    {-# MINIMAL echo'echo #-}
    echo'echo :: Echo'echo'params -> cap -> Rpc.RpcT IO (Echo'echo'results)
    echo'echo _ _ = Rpc.throwMethodUnimplemented
export_Echo :: Echo'server_ a => a -> Rpc.RpcT IO Echo
export_Echo server_ = Echo <$> Rpc.export Rpc.Server
    { handleStop = pure () -- TODO
    , handleCall = \interfaceId methodId payload -> case interfaceId of
        10255578992688506164 -> case methodId of
            0 -> do
                RH'.handleMethod server_ echo'echo payload
            _ -> Rpc.throwMethodUnimplemented
        _ -> Rpc.throwMethodUnimplemented
    }
instance Echo'server_ Echo where
    echo'echo args (Echo client) = do
        args' <- PH'.createPure maxBound $ Convert.valueToMsg args >>= PH'.getRoot
        resultPromise <- Rpc.call 10255578992688506164 0 (Just (U'.PtrStruct args')) client
        result <- Rpc.waitIO resultPromise
        evalLimitT maxBound $ PH'.convertValue result
data EchoBase
    = EchoBase
        {echo :: Echo}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize EchoBase where
    type Cerial msg EchoBase = Capnp.Gen.ById.X832bcc6686a26d56.EchoBase msg
    decerialize raw = do
        EchoBase <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_EchoBase'echo raw >>= C'.decerialize)
instance C'.Marshal EchoBase where
    marshalInto raw value = do
        case value of
            EchoBase{..} -> do
                error "TODO: marshal interface fields."
instance C'.Cerialize s EchoBase
instance C'.FromStruct M'.ConstMsg EchoBase where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.EchoBase M'.ConstMsg)
instance Default EchoBase where
    def = PH'.defaultStruct
data EchoBases
    = EchoBases
        {bases :: PU'.ListOf (EchoBase)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize EchoBases where
    type Cerial msg EchoBases = Capnp.Gen.ById.X832bcc6686a26d56.EchoBases msg
    decerialize raw = do
        EchoBases <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_EchoBases'bases raw >>= C'.decerialize)
instance C'.Marshal EchoBases where
    marshalInto raw value = do
        case value of
            EchoBases{..} -> do
                let len_ = V.length bases
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_EchoBases'bases len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (bases V.! i)
instance C'.Cerialize s EchoBases
instance C'.FromStruct M'.ConstMsg EchoBases where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.EchoBases M'.ConstMsg)
instance Default EchoBases where
    def = PH'.defaultStruct
data F16
    = F16
        {base :: PlaneBase}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize F16 where
    type Cerial msg F16 = Capnp.Gen.ById.X832bcc6686a26d56.F16 msg
    decerialize raw = do
        F16 <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_F16'base raw >>= C'.decerialize)
instance C'.Marshal F16 where
    marshalInto raw value = do
        case value of
            F16{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_F16'base raw
                C'.marshalInto field_ base
instance C'.Cerialize s F16
instance C'.FromStruct M'.ConstMsg F16 where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.F16 M'.ConstMsg)
instance Default F16 where
    def = PH'.defaultStruct
data HoldsText
    = HoldsText
        {txt :: Text,
        lst :: PU'.ListOf (Text),
        lstlst :: PU'.ListOf (PU'.ListOf (Text))}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsText where
    type Cerial msg HoldsText = Capnp.Gen.ById.X832bcc6686a26d56.HoldsText msg
    decerialize raw = do
        HoldsText <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsText'txt raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsText'lst raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsText'lstlst raw >>= C'.decerialize)
instance C'.Marshal HoldsText where
    marshalInto raw value = do
        case value of
            HoldsText{..} -> do
                field_ <- C'.cerialize (U'.message raw) txt
                Capnp.Gen.ById.X832bcc6686a26d56.set_HoldsText'txt raw field_
                let len_ = V.length lst
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsText'lst len_ raw
                pure ()
                let len_ = V.length lstlst
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsText'lstlst len_ raw
                pure ()
instance C'.Cerialize s HoldsText
instance C'.FromStruct M'.ConstMsg HoldsText where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsText M'.ConstMsg)
instance Default HoldsText where
    def = PH'.defaultStruct
data HoldsVerEmptyList
    = HoldsVerEmptyList
        {mylist :: PU'.ListOf (VerEmpty)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerEmptyList where
    type Cerial msg HoldsVerEmptyList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerEmptyList msg
    decerialize raw = do
        HoldsVerEmptyList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerEmptyList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerEmptyList where
    marshalInto raw value = do
        case value of
            HoldsVerEmptyList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerEmptyList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerEmptyList
instance C'.FromStruct M'.ConstMsg HoldsVerEmptyList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerEmptyList M'.ConstMsg)
instance Default HoldsVerEmptyList where
    def = PH'.defaultStruct
data HoldsVerOneDataList
    = HoldsVerOneDataList
        {mylist :: PU'.ListOf (VerOneData)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerOneDataList where
    type Cerial msg HoldsVerOneDataList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerOneDataList msg
    decerialize raw = do
        HoldsVerOneDataList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerOneDataList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerOneDataList where
    marshalInto raw value = do
        case value of
            HoldsVerOneDataList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerOneDataList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerOneDataList
instance C'.FromStruct M'.ConstMsg HoldsVerOneDataList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerOneDataList M'.ConstMsg)
instance Default HoldsVerOneDataList where
    def = PH'.defaultStruct
data HoldsVerOnePtrList
    = HoldsVerOnePtrList
        {mylist :: PU'.ListOf (VerOnePtr)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerOnePtrList where
    type Cerial msg HoldsVerOnePtrList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerOnePtrList msg
    decerialize raw = do
        HoldsVerOnePtrList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerOnePtrList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerOnePtrList where
    marshalInto raw value = do
        case value of
            HoldsVerOnePtrList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerOnePtrList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerOnePtrList
instance C'.FromStruct M'.ConstMsg HoldsVerOnePtrList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerOnePtrList M'.ConstMsg)
instance Default HoldsVerOnePtrList where
    def = PH'.defaultStruct
data HoldsVerTwoDataList
    = HoldsVerTwoDataList
        {mylist :: PU'.ListOf (VerTwoData)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerTwoDataList where
    type Cerial msg HoldsVerTwoDataList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoDataList msg
    decerialize raw = do
        HoldsVerTwoDataList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerTwoDataList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerTwoDataList where
    marshalInto raw value = do
        case value of
            HoldsVerTwoDataList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerTwoDataList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerTwoDataList
instance C'.FromStruct M'.ConstMsg HoldsVerTwoDataList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoDataList M'.ConstMsg)
instance Default HoldsVerTwoDataList where
    def = PH'.defaultStruct
data HoldsVerTwoPtrList
    = HoldsVerTwoPtrList
        {mylist :: PU'.ListOf (VerTwoPtr)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerTwoPtrList where
    type Cerial msg HoldsVerTwoPtrList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoPtrList msg
    decerialize raw = do
        HoldsVerTwoPtrList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerTwoPtrList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerTwoPtrList where
    marshalInto raw value = do
        case value of
            HoldsVerTwoPtrList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerTwoPtrList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerTwoPtrList
instance C'.FromStruct M'.ConstMsg HoldsVerTwoPtrList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoPtrList M'.ConstMsg)
instance Default HoldsVerTwoPtrList where
    def = PH'.defaultStruct
data HoldsVerTwoTwoList
    = HoldsVerTwoTwoList
        {mylist :: PU'.ListOf (VerTwoDataTwoPtr)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerTwoTwoList where
    type Cerial msg HoldsVerTwoTwoList = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoTwoList msg
    decerialize raw = do
        HoldsVerTwoTwoList <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerTwoTwoList'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerTwoTwoList where
    marshalInto raw value = do
        case value of
            HoldsVerTwoTwoList{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerTwoTwoList'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerTwoTwoList
instance C'.FromStruct M'.ConstMsg HoldsVerTwoTwoList where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoTwoList M'.ConstMsg)
instance Default HoldsVerTwoTwoList where
    def = PH'.defaultStruct
data HoldsVerTwoTwoPlus
    = HoldsVerTwoTwoPlus
        {mylist :: PU'.ListOf (VerTwoTwoPlus)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize HoldsVerTwoTwoPlus where
    type Cerial msg HoldsVerTwoTwoPlus = Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoTwoPlus msg
    decerialize raw = do
        HoldsVerTwoTwoPlus <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_HoldsVerTwoTwoPlus'mylist raw >>= C'.decerialize)
instance C'.Marshal HoldsVerTwoTwoPlus where
    marshalInto raw value = do
        case value of
            HoldsVerTwoTwoPlus{..} -> do
                let len_ = V.length mylist
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_HoldsVerTwoTwoPlus'mylist len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (mylist V.! i)
instance C'.Cerialize s HoldsVerTwoTwoPlus
instance C'.FromStruct M'.ConstMsg HoldsVerTwoTwoPlus where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.HoldsVerTwoTwoPlus M'.ConstMsg)
instance Default HoldsVerTwoTwoPlus where
    def = PH'.defaultStruct
data Hoth
    = Hoth
        {base :: EchoBase}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Hoth where
    type Cerial msg Hoth = Capnp.Gen.ById.X832bcc6686a26d56.Hoth msg
    decerialize raw = do
        Hoth <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Hoth'base raw >>= C'.decerialize)
instance C'.Marshal Hoth where
    marshalInto raw value = do
        case value of
            Hoth{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Hoth'base raw
                C'.marshalInto field_ base
instance C'.Cerialize s Hoth
instance C'.FromStruct M'.ConstMsg Hoth where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Hoth M'.ConstMsg)
instance Default Hoth where
    def = PH'.defaultStruct
data ListStructCapn
    = ListStructCapn
        {vec :: PU'.ListOf (Nester1Capn)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize ListStructCapn where
    type Cerial msg ListStructCapn = Capnp.Gen.ById.X832bcc6686a26d56.ListStructCapn msg
    decerialize raw = do
        ListStructCapn <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_ListStructCapn'vec raw >>= C'.decerialize)
instance C'.Marshal ListStructCapn where
    marshalInto raw value = do
        case value of
            ListStructCapn{..} -> do
                let len_ = V.length vec
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_ListStructCapn'vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (vec V.! i)
instance C'.Cerialize s ListStructCapn
instance C'.FromStruct M'.ConstMsg ListStructCapn where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.ListStructCapn M'.ConstMsg)
instance Default ListStructCapn where
    def = PH'.defaultStruct
data Nester1Capn
    = Nester1Capn
        {strs :: PU'.ListOf (Text)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Nester1Capn where
    type Cerial msg Nester1Capn = Capnp.Gen.ById.X832bcc6686a26d56.Nester1Capn msg
    decerialize raw = do
        Nester1Capn <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Nester1Capn'strs raw >>= C'.decerialize)
instance C'.Marshal Nester1Capn where
    marshalInto raw value = do
        case value of
            Nester1Capn{..} -> do
                let len_ = V.length strs
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Nester1Capn'strs len_ raw
                pure ()
instance C'.Cerialize s Nester1Capn
instance C'.FromStruct M'.ConstMsg Nester1Capn where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Nester1Capn M'.ConstMsg)
instance Default Nester1Capn where
    def = PH'.defaultStruct
data PlaneBase
    = PlaneBase
        {name :: Text,
        homes :: PU'.ListOf (Capnp.Gen.ById.X832bcc6686a26d56.Airport),
        rating :: Int64,
        canFly :: Bool,
        capacity :: Int64,
        maxSpeed :: Double}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize PlaneBase where
    type Cerial msg PlaneBase = Capnp.Gen.ById.X832bcc6686a26d56.PlaneBase msg
    decerialize raw = do
        PlaneBase <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'name raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'homes raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'rating raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'canFly raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'capacity raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_PlaneBase'maxSpeed raw)
instance C'.Marshal PlaneBase where
    marshalInto raw value = do
        case value of
            PlaneBase{..} -> do
                field_ <- C'.cerialize (U'.message raw) name
                Capnp.Gen.ById.X832bcc6686a26d56.set_PlaneBase'name raw field_
                let len_ = V.length homes
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_PlaneBase'homes len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (homes V.! i) i field_
                Capnp.Gen.ById.X832bcc6686a26d56.set_PlaneBase'rating raw rating
                Capnp.Gen.ById.X832bcc6686a26d56.set_PlaneBase'canFly raw canFly
                Capnp.Gen.ById.X832bcc6686a26d56.set_PlaneBase'capacity raw capacity
                Capnp.Gen.ById.X832bcc6686a26d56.set_PlaneBase'maxSpeed raw maxSpeed
instance C'.Cerialize s PlaneBase
instance C'.FromStruct M'.ConstMsg PlaneBase where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.PlaneBase M'.ConstMsg)
instance Default PlaneBase where
    def = PH'.defaultStruct
data RWTestCapn
    = RWTestCapn
        {nestMatrix :: PU'.ListOf (PU'.ListOf (Nester1Capn))}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize RWTestCapn where
    type Cerial msg RWTestCapn = Capnp.Gen.ById.X832bcc6686a26d56.RWTestCapn msg
    decerialize raw = do
        RWTestCapn <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_RWTestCapn'nestMatrix raw >>= C'.decerialize)
instance C'.Marshal RWTestCapn where
    marshalInto raw value = do
        case value of
            RWTestCapn{..} -> do
                let len_ = V.length nestMatrix
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_RWTestCapn'nestMatrix len_ raw
                pure ()
instance C'.Cerialize s RWTestCapn
instance C'.FromStruct M'.ConstMsg RWTestCapn where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.RWTestCapn M'.ConstMsg)
instance Default RWTestCapn where
    def = PH'.defaultStruct
data Regression
    = Regression
        {base :: PlaneBase,
        b0 :: Double,
        beta :: PU'.ListOf (Double),
        planes :: PU'.ListOf (Aircraft),
        ymu :: Double,
        ysd :: Double}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Regression where
    type Cerial msg Regression = Capnp.Gen.ById.X832bcc6686a26d56.Regression msg
    decerialize raw = do
        Regression <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'base raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'b0 raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'beta raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'planes raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'ymu raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Regression'ysd raw)
instance C'.Marshal Regression where
    marshalInto raw value = do
        case value of
            Regression{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Regression'base raw
                C'.marshalInto field_ base
                Capnp.Gen.ById.X832bcc6686a26d56.set_Regression'b0 raw b0
                let len_ = V.length beta
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Regression'beta len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (beta V.! i) i field_
                let len_ = V.length planes
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Regression'planes len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (planes V.! i)
                Capnp.Gen.ById.X832bcc6686a26d56.set_Regression'ymu raw ymu
                Capnp.Gen.ById.X832bcc6686a26d56.set_Regression'ysd raw ysd
instance C'.Cerialize s Regression
instance C'.FromStruct M'.ConstMsg Regression where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Regression M'.ConstMsg)
instance Default Regression where
    def = PH'.defaultStruct
data StackingA
    = StackingA
        {num :: Int32,
        b :: StackingB}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize StackingA where
    type Cerial msg StackingA = Capnp.Gen.ById.X832bcc6686a26d56.StackingA msg
    decerialize raw = do
        StackingA <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_StackingA'num raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_StackingA'b raw >>= C'.decerialize)
instance C'.Marshal StackingA where
    marshalInto raw value = do
        case value of
            StackingA{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_StackingA'num raw num
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_StackingA'b raw
                C'.marshalInto field_ b
instance C'.Cerialize s StackingA
instance C'.FromStruct M'.ConstMsg StackingA where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.StackingA M'.ConstMsg)
instance Default StackingA where
    def = PH'.defaultStruct
data StackingB
    = StackingB
        {num :: Int32}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize StackingB where
    type Cerial msg StackingB = Capnp.Gen.ById.X832bcc6686a26d56.StackingB msg
    decerialize raw = do
        StackingB <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_StackingB'num raw)
instance C'.Marshal StackingB where
    marshalInto raw value = do
        case value of
            StackingB{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_StackingB'num raw num
instance C'.Cerialize s StackingB
instance C'.FromStruct M'.ConstMsg StackingB where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.StackingB M'.ConstMsg)
instance Default StackingB where
    def = PH'.defaultStruct
data StackingRoot
    = StackingRoot
        {aWithDefault :: StackingA,
        a :: StackingA}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize StackingRoot where
    type Cerial msg StackingRoot = Capnp.Gen.ById.X832bcc6686a26d56.StackingRoot msg
    decerialize raw = do
        StackingRoot <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_StackingRoot'aWithDefault raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_StackingRoot'a raw >>= C'.decerialize)
instance C'.Marshal StackingRoot where
    marshalInto raw value = do
        case value of
            StackingRoot{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_StackingRoot'aWithDefault raw
                C'.marshalInto field_ aWithDefault
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_StackingRoot'a raw
                C'.marshalInto field_ a
instance C'.Cerialize s StackingRoot
instance C'.FromStruct M'.ConstMsg StackingRoot where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.StackingRoot M'.ConstMsg)
instance Default StackingRoot where
    def = PH'.defaultStruct
data VerEmpty
    = VerEmpty
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerEmpty where
    type Cerial msg VerEmpty = Capnp.Gen.ById.X832bcc6686a26d56.VerEmpty msg
    decerialize raw = do
        pure $ VerEmpty
instance C'.Marshal VerEmpty where
    marshalInto raw value = do
        case value of
            VerEmpty -> pure ()
instance C'.Cerialize s VerEmpty
instance C'.FromStruct M'.ConstMsg VerEmpty where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerEmpty M'.ConstMsg)
instance Default VerEmpty where
    def = PH'.defaultStruct
data VerOneData
    = VerOneData
        {val :: Int16}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerOneData where
    type Cerial msg VerOneData = Capnp.Gen.ById.X832bcc6686a26d56.VerOneData msg
    decerialize raw = do
        VerOneData <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerOneData'val raw)
instance C'.Marshal VerOneData where
    marshalInto raw value = do
        case value of
            VerOneData{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerOneData'val raw val
instance C'.Cerialize s VerOneData
instance C'.FromStruct M'.ConstMsg VerOneData where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerOneData M'.ConstMsg)
instance Default VerOneData where
    def = PH'.defaultStruct
data VerOnePtr
    = VerOnePtr
        {ptr :: VerOneData}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerOnePtr where
    type Cerial msg VerOnePtr = Capnp.Gen.ById.X832bcc6686a26d56.VerOnePtr msg
    decerialize raw = do
        VerOnePtr <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerOnePtr'ptr raw >>= C'.decerialize)
instance C'.Marshal VerOnePtr where
    marshalInto raw value = do
        case value of
            VerOnePtr{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerOnePtr'ptr raw
                C'.marshalInto field_ ptr
instance C'.Cerialize s VerOnePtr
instance C'.FromStruct M'.ConstMsg VerOnePtr where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerOnePtr M'.ConstMsg)
instance Default VerOnePtr where
    def = PH'.defaultStruct
data VerTwoData
    = VerTwoData
        {val :: Int16,
        duo :: Int64}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerTwoData where
    type Cerial msg VerTwoData = Capnp.Gen.ById.X832bcc6686a26d56.VerTwoData msg
    decerialize raw = do
        VerTwoData <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoData'val raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoData'duo raw)
instance C'.Marshal VerTwoData where
    marshalInto raw value = do
        case value of
            VerTwoData{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoData'val raw val
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoData'duo raw duo
instance C'.Cerialize s VerTwoData
instance C'.FromStruct M'.ConstMsg VerTwoData where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerTwoData M'.ConstMsg)
instance Default VerTwoData where
    def = PH'.defaultStruct
data VerTwoDataTwoPtr
    = VerTwoDataTwoPtr
        {val :: Int16,
        duo :: Int64,
        ptr1 :: VerOneData,
        ptr2 :: VerOneData}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerTwoDataTwoPtr where
    type Cerial msg VerTwoDataTwoPtr = Capnp.Gen.ById.X832bcc6686a26d56.VerTwoDataTwoPtr msg
    decerialize raw = do
        VerTwoDataTwoPtr <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoDataTwoPtr'val raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoDataTwoPtr'duo raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoDataTwoPtr'ptr1 raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoDataTwoPtr'ptr2 raw >>= C'.decerialize)
instance C'.Marshal VerTwoDataTwoPtr where
    marshalInto raw value = do
        case value of
            VerTwoDataTwoPtr{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoDataTwoPtr'val raw val
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoDataTwoPtr'duo raw duo
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoDataTwoPtr'ptr1 raw
                C'.marshalInto field_ ptr1
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoDataTwoPtr'ptr2 raw
                C'.marshalInto field_ ptr2
instance C'.Cerialize s VerTwoDataTwoPtr
instance C'.FromStruct M'.ConstMsg VerTwoDataTwoPtr where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerTwoDataTwoPtr M'.ConstMsg)
instance Default VerTwoDataTwoPtr where
    def = PH'.defaultStruct
data VerTwoPtr
    = VerTwoPtr
        {ptr1 :: VerOneData,
        ptr2 :: VerOneData}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerTwoPtr where
    type Cerial msg VerTwoPtr = Capnp.Gen.ById.X832bcc6686a26d56.VerTwoPtr msg
    decerialize raw = do
        VerTwoPtr <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoPtr'ptr1 raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoPtr'ptr2 raw >>= C'.decerialize)
instance C'.Marshal VerTwoPtr where
    marshalInto raw value = do
        case value of
            VerTwoPtr{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoPtr'ptr1 raw
                C'.marshalInto field_ ptr1
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoPtr'ptr2 raw
                C'.marshalInto field_ ptr2
instance C'.Cerialize s VerTwoPtr
instance C'.FromStruct M'.ConstMsg VerTwoPtr where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerTwoPtr M'.ConstMsg)
instance Default VerTwoPtr where
    def = PH'.defaultStruct
data VerTwoTwoPlus
    = VerTwoTwoPlus
        {val :: Int16,
        duo :: Int64,
        ptr1 :: VerTwoDataTwoPtr,
        ptr2 :: VerTwoDataTwoPtr,
        tre :: Int64,
        lst3 :: PU'.ListOf (Int64)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VerTwoTwoPlus where
    type Cerial msg VerTwoTwoPlus = Capnp.Gen.ById.X832bcc6686a26d56.VerTwoTwoPlus msg
    decerialize raw = do
        VerTwoTwoPlus <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'val raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'duo raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'ptr1 raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'ptr2 raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'tre raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_VerTwoTwoPlus'lst3 raw >>= C'.decerialize)
instance C'.Marshal VerTwoTwoPlus where
    marshalInto raw value = do
        case value of
            VerTwoTwoPlus{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoTwoPlus'val raw val
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoTwoPlus'duo raw duo
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoTwoPlus'ptr1 raw
                C'.marshalInto field_ ptr1
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoTwoPlus'ptr2 raw
                C'.marshalInto field_ ptr2
                Capnp.Gen.ById.X832bcc6686a26d56.set_VerTwoTwoPlus'tre raw tre
                let len_ = V.length lst3
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_VerTwoTwoPlus'lst3 len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (lst3 V.! i) i field_
instance C'.Cerialize s VerTwoTwoPlus
instance C'.FromStruct M'.ConstMsg VerTwoTwoPlus where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VerTwoTwoPlus M'.ConstMsg)
instance Default VerTwoTwoPlus where
    def = PH'.defaultStruct
data VoidUnion
    = VoidUnion'a
    | VoidUnion'b
    | VoidUnion'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize VoidUnion where
    type Cerial msg VoidUnion = Capnp.Gen.ById.X832bcc6686a26d56.VoidUnion msg
    decerialize raw = do
        raw <- Capnp.Gen.ById.X832bcc6686a26d56.get_VoidUnion' raw
        case raw of
            Capnp.Gen.ById.X832bcc6686a26d56.VoidUnion'a -> pure VoidUnion'a
            Capnp.Gen.ById.X832bcc6686a26d56.VoidUnion'b -> pure VoidUnion'b
            Capnp.Gen.ById.X832bcc6686a26d56.VoidUnion'unknown' val -> pure $ VoidUnion'unknown' val
instance C'.Marshal VoidUnion where
    marshalInto raw value = do
        case value of
            VoidUnion'a -> Capnp.Gen.ById.X832bcc6686a26d56.set_VoidUnion'a raw
            VoidUnion'b -> Capnp.Gen.ById.X832bcc6686a26d56.set_VoidUnion'b raw
            VoidUnion'unknown' arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_VoidUnion'unknown' raw arg_
instance C'.Cerialize s VoidUnion
instance C'.FromStruct M'.ConstMsg VoidUnion where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.VoidUnion M'.ConstMsg)
instance Default VoidUnion where
    def = PH'.defaultStruct
data Wrap2x2
    = Wrap2x2
        {mightNotBeReallyEmpty :: VerTwoDataTwoPtr}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Wrap2x2 where
    type Cerial msg Wrap2x2 = Capnp.Gen.ById.X832bcc6686a26d56.Wrap2x2 msg
    decerialize raw = do
        Wrap2x2 <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Wrap2x2'mightNotBeReallyEmpty raw >>= C'.decerialize)
instance C'.Marshal Wrap2x2 where
    marshalInto raw value = do
        case value of
            Wrap2x2{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Wrap2x2'mightNotBeReallyEmpty raw
                C'.marshalInto field_ mightNotBeReallyEmpty
instance C'.Cerialize s Wrap2x2
instance C'.FromStruct M'.ConstMsg Wrap2x2 where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Wrap2x2 M'.ConstMsg)
instance Default Wrap2x2 where
    def = PH'.defaultStruct
data Wrap2x2plus
    = Wrap2x2plus
        {mightNotBeReallyEmpty :: VerTwoTwoPlus}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Wrap2x2plus where
    type Cerial msg Wrap2x2plus = Capnp.Gen.ById.X832bcc6686a26d56.Wrap2x2plus msg
    decerialize raw = do
        Wrap2x2plus <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Wrap2x2plus'mightNotBeReallyEmpty raw >>= C'.decerialize)
instance C'.Marshal Wrap2x2plus where
    marshalInto raw value = do
        case value of
            Wrap2x2plus{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Wrap2x2plus'mightNotBeReallyEmpty raw
                C'.marshalInto field_ mightNotBeReallyEmpty
instance C'.Cerialize s Wrap2x2plus
instance C'.FromStruct M'.ConstMsg Wrap2x2plus where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Wrap2x2plus M'.ConstMsg)
instance Default Wrap2x2plus where
    def = PH'.defaultStruct
data WrapEmpty
    = WrapEmpty
        {mightNotBeReallyEmpty :: VerEmpty}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize WrapEmpty where
    type Cerial msg WrapEmpty = Capnp.Gen.ById.X832bcc6686a26d56.WrapEmpty msg
    decerialize raw = do
        WrapEmpty <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_WrapEmpty'mightNotBeReallyEmpty raw >>= C'.decerialize)
instance C'.Marshal WrapEmpty where
    marshalInto raw value = do
        case value of
            WrapEmpty{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_WrapEmpty'mightNotBeReallyEmpty raw
                C'.marshalInto field_ mightNotBeReallyEmpty
instance C'.Cerialize s WrapEmpty
instance C'.FromStruct M'.ConstMsg WrapEmpty where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.WrapEmpty M'.ConstMsg)
instance Default WrapEmpty where
    def = PH'.defaultStruct
data Z
    = Z'void
    | Z'zz (Z)
    | Z'f64 (Double)
    | Z'f32 (Float)
    | Z'i64 (Int64)
    | Z'i32 (Int32)
    | Z'i16 (Int16)
    | Z'i8 (Int8)
    | Z'u64 (Word64)
    | Z'u32 (Word32)
    | Z'u16 (Word16)
    | Z'u8 (Word8)
    | Z'bool (Bool)
    | Z'text (Text)
    | Z'blob (Data)
    | Z'f64vec (PU'.ListOf (Double))
    | Z'f32vec (PU'.ListOf (Float))
    | Z'i64vec (PU'.ListOf (Int64))
    | Z'i32vec (PU'.ListOf (Int32))
    | Z'i16vec (PU'.ListOf (Int16))
    | Z'i8vec (PU'.ListOf (Int8))
    | Z'u64vec (PU'.ListOf (Word64))
    | Z'u32vec (PU'.ListOf (Word32))
    | Z'u16vec (PU'.ListOf (Word16))
    | Z'u8vec (PU'.ListOf (Word8))
    | Z'zvec (PU'.ListOf (Z))
    | Z'zvecvec (PU'.ListOf (PU'.ListOf (Z)))
    | Z'zdate (Zdate)
    | Z'zdata (Zdata)
    | Z'aircraftvec (PU'.ListOf (Aircraft))
    | Z'aircraft (Aircraft)
    | Z'regression (Regression)
    | Z'planebase (PlaneBase)
    | Z'airport (Capnp.Gen.ById.X832bcc6686a26d56.Airport)
    | Z'b737 (B737)
    | Z'a320 (A320)
    | Z'f16 (F16)
    | Z'zdatevec (PU'.ListOf (Zdate))
    | Z'zdatavec (PU'.ListOf (Zdata))
    | Z'boolvec (PU'.ListOf (Bool))
    | Z'datavec (PU'.ListOf (Data))
    | Z'textvec (PU'.ListOf (Text))
    | Z'grp
        {first :: Word64,
        second :: Word64}
    | Z'echo (Echo)
    | Z'echoBases (EchoBases)
    | Z'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Z where
    type Cerial msg Z = Capnp.Gen.ById.X832bcc6686a26d56.Z msg
    decerialize raw = do
        raw <- Capnp.Gen.ById.X832bcc6686a26d56.get_Z' raw
        case raw of
            Capnp.Gen.ById.X832bcc6686a26d56.Z'void -> pure Z'void
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zz val -> Z'zz <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'f64 val -> pure (Z'f64 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'f32 val -> pure (Z'f32 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i64 val -> pure (Z'i64 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i32 val -> pure (Z'i32 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i16 val -> pure (Z'i16 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i8 val -> pure (Z'i8 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u64 val -> pure (Z'u64 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u32 val -> pure (Z'u32 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u16 val -> pure (Z'u16 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u8 val -> pure (Z'u8 val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'bool val -> pure (Z'bool val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'text val -> Z'text <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'blob val -> Z'blob <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'f64vec val -> Z'f64vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'f32vec val -> Z'f32vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i64vec val -> Z'i64vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i32vec val -> Z'i32vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i16vec val -> Z'i16vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'i8vec val -> Z'i8vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u64vec val -> Z'u64vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u32vec val -> Z'u32vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u16vec val -> Z'u16vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'u8vec val -> Z'u8vec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zvec val -> Z'zvec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zvecvec val -> Z'zvecvec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zdate val -> Z'zdate <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zdata val -> Z'zdata <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'aircraftvec val -> Z'aircraftvec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'aircraft val -> Z'aircraft <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'regression val -> Z'regression <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'planebase val -> Z'planebase <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'airport val -> pure (Z'airport val)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'b737 val -> Z'b737 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'a320 val -> Z'a320 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'f16 val -> Z'f16 <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zdatevec val -> Z'zdatevec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'zdatavec val -> Z'zdatavec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'boolvec val -> Z'boolvec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'datavec val -> Z'datavec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'textvec val -> Z'textvec <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'grp raw -> Z'grp <$>
                (Capnp.Gen.ById.X832bcc6686a26d56.get_Z'grp'first raw) <*>
                (Capnp.Gen.ById.X832bcc6686a26d56.get_Z'grp'second raw)
            Capnp.Gen.ById.X832bcc6686a26d56.Z'echo val -> Z'echo <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'echoBases val -> Z'echoBases <$> C'.decerialize val
            Capnp.Gen.ById.X832bcc6686a26d56.Z'unknown' val -> pure $ Z'unknown' val
instance C'.Marshal Z where
    marshalInto raw value = do
        case value of
            Z'void -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'void raw
            Z'zz arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zz raw
                C'.marshalInto field_ arg_
            Z'f64 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'f64 raw arg_
            Z'f32 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'f32 raw arg_
            Z'i64 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'i64 raw arg_
            Z'i32 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'i32 raw arg_
            Z'i16 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'i16 raw arg_
            Z'i8 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'i8 raw arg_
            Z'u64 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'u64 raw arg_
            Z'u32 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'u32 raw arg_
            Z'u16 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'u16 raw arg_
            Z'u8 arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'u8 raw arg_
            Z'bool arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'bool raw arg_
            Z'text arg_ -> do
                field_ <- C'.cerialize (U'.message raw) arg_
                Capnp.Gen.ById.X832bcc6686a26d56.set_Z'text raw field_
            Z'blob arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'blob (BS.length arg_) raw
                C'.marshalInto field_ arg_
            Z'f64vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'f64vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'f32vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'f32vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'i64vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'i64vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'i32vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'i32vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'i16vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'i16vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'i8vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'i8vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'u64vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'u64vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'u32vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'u32vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'u16vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'u16vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'u8vec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'u8vec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'zvec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zvec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            Z'zvecvec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zvecvec len_ raw
                pure ()
            Z'zdate arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zdate raw
                C'.marshalInto field_ arg_
            Z'zdata arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zdata raw
                C'.marshalInto field_ arg_
            Z'aircraftvec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'aircraftvec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            Z'aircraft arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'aircraft raw
                C'.marshalInto field_ arg_
            Z'regression arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'regression raw
                C'.marshalInto field_ arg_
            Z'planebase arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'planebase raw
                C'.marshalInto field_ arg_
            Z'airport arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'airport raw arg_
            Z'b737 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'b737 raw
                C'.marshalInto field_ arg_
            Z'a320 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'a320 raw
                C'.marshalInto field_ arg_
            Z'f16 arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'f16 raw
                C'.marshalInto field_ arg_
            Z'zdatevec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zdatevec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            Z'zdatavec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'zdatavec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            Z'boolvec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'boolvec len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    C'.setIndex (arg_ V.! i) i field_
            Z'datavec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'datavec len_ raw
                pure ()
            Z'textvec arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'textvec len_ raw
                pure ()
            Z'grp{..} -> do
                raw <- Capnp.Gen.ById.X832bcc6686a26d56.set_Z'grp raw
                Capnp.Gen.ById.X832bcc6686a26d56.set_Z'grp'first raw first
                Capnp.Gen.ById.X832bcc6686a26d56.set_Z'grp'second raw second
            Z'echo arg_ -> do
                error "TODO: marshal interface fields."
            Z'echoBases arg_ -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Z'echoBases raw
                C'.marshalInto field_ arg_
            Z'unknown' arg_ -> Capnp.Gen.ById.X832bcc6686a26d56.set_Z'unknown' raw arg_
instance C'.Cerialize s Z
instance C'.FromStruct M'.ConstMsg Z where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Z M'.ConstMsg)
instance Default Z where
    def = PH'.defaultStruct
data Zdata
    = Zdata
        {data_ :: Data}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Zdata where
    type Cerial msg Zdata = Capnp.Gen.ById.X832bcc6686a26d56.Zdata msg
    decerialize raw = do
        Zdata <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zdata'data_ raw >>= C'.decerialize)
instance C'.Marshal Zdata where
    marshalInto raw value = do
        case value of
            Zdata{..} -> do
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Zdata'data_ (BS.length data_) raw
                C'.marshalInto field_ data_
instance C'.Cerialize s Zdata
instance C'.FromStruct M'.ConstMsg Zdata where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Zdata M'.ConstMsg)
instance Default Zdata where
    def = PH'.defaultStruct
data Zdate
    = Zdate
        {year :: Int16,
        month :: Word8,
        day :: Word8}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Zdate where
    type Cerial msg Zdate = Capnp.Gen.ById.X832bcc6686a26d56.Zdate msg
    decerialize raw = do
        Zdate <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zdate'year raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zdate'month raw) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zdate'day raw)
instance C'.Marshal Zdate where
    marshalInto raw value = do
        case value of
            Zdate{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_Zdate'year raw year
                Capnp.Gen.ById.X832bcc6686a26d56.set_Zdate'month raw month
                Capnp.Gen.ById.X832bcc6686a26d56.set_Zdate'day raw day
instance C'.Cerialize s Zdate
instance C'.FromStruct M'.ConstMsg Zdate where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Zdate M'.ConstMsg)
instance Default Zdate where
    def = PH'.defaultStruct
data Zjob
    = Zjob
        {cmd :: Text,
        args :: PU'.ListOf (Text)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Zjob where
    type Cerial msg Zjob = Capnp.Gen.ById.X832bcc6686a26d56.Zjob msg
    decerialize raw = do
        Zjob <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zjob'cmd raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zjob'args raw >>= C'.decerialize)
instance C'.Marshal Zjob where
    marshalInto raw value = do
        case value of
            Zjob{..} -> do
                field_ <- C'.cerialize (U'.message raw) cmd
                Capnp.Gen.ById.X832bcc6686a26d56.set_Zjob'cmd raw field_
                let len_ = V.length args
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Zjob'args len_ raw
                pure ()
instance C'.Cerialize s Zjob
instance C'.FromStruct M'.ConstMsg Zjob where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Zjob M'.ConstMsg)
instance Default Zjob where
    def = PH'.defaultStruct
data Zserver
    = Zserver
        {waitingjobs :: PU'.ListOf (Zjob)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Zserver where
    type Cerial msg Zserver = Capnp.Gen.ById.X832bcc6686a26d56.Zserver msg
    decerialize raw = do
        Zserver <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Zserver'waitingjobs raw >>= C'.decerialize)
instance C'.Marshal Zserver where
    marshalInto raw value = do
        case value of
            Zserver{..} -> do
                let len_ = V.length waitingjobs
                field_ <- Capnp.Gen.ById.X832bcc6686a26d56.new_Zserver'waitingjobs len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (waitingjobs V.! i)
instance C'.Cerialize s Zserver
instance C'.FromStruct M'.ConstMsg Zserver where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Zserver M'.ConstMsg)
instance Default Zserver where
    def = PH'.defaultStruct
constDate :: Zdate
constDate = PH'.toPurePtrConst Capnp.Gen.ById.X832bcc6686a26d56.constDate
constList :: PU'.ListOf (Zdate)
constList = PH'.toPurePtrConst Capnp.Gen.ById.X832bcc6686a26d56.constList
data CallSequence'getNumber'params
    = CallSequence'getNumber'params
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CallSequence'getNumber'params where
    type Cerial msg CallSequence'getNumber'params = Capnp.Gen.ById.X832bcc6686a26d56.CallSequence'getNumber'params msg
    decerialize raw = do
        pure $ CallSequence'getNumber'params
instance C'.Marshal CallSequence'getNumber'params where
    marshalInto raw value = do
        case value of
            CallSequence'getNumber'params -> pure ()
instance C'.Cerialize s CallSequence'getNumber'params
instance C'.FromStruct M'.ConstMsg CallSequence'getNumber'params where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CallSequence'getNumber'params M'.ConstMsg)
instance Default CallSequence'getNumber'params where
    def = PH'.defaultStruct
data CallSequence'getNumber'results
    = CallSequence'getNumber'results
        {n :: Word32}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CallSequence'getNumber'results where
    type Cerial msg CallSequence'getNumber'results = Capnp.Gen.ById.X832bcc6686a26d56.CallSequence'getNumber'results msg
    decerialize raw = do
        CallSequence'getNumber'results <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_CallSequence'getNumber'results'n raw)
instance C'.Marshal CallSequence'getNumber'results where
    marshalInto raw value = do
        case value of
            CallSequence'getNumber'results{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_CallSequence'getNumber'results'n raw n
instance C'.Cerialize s CallSequence'getNumber'results
instance C'.FromStruct M'.ConstMsg CallSequence'getNumber'results where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CallSequence'getNumber'results M'.ConstMsg)
instance Default CallSequence'getNumber'results where
    def = PH'.defaultStruct
data CounterAcceptor'accept'params
    = CounterAcceptor'accept'params
        {counter :: CallSequence}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CounterAcceptor'accept'params where
    type Cerial msg CounterAcceptor'accept'params = Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor'accept'params msg
    decerialize raw = do
        CounterAcceptor'accept'params <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_CounterAcceptor'accept'params'counter raw >>= C'.decerialize)
instance C'.Marshal CounterAcceptor'accept'params where
    marshalInto raw value = do
        case value of
            CounterAcceptor'accept'params{..} -> do
                error "TODO: marshal interface fields."
instance C'.Cerialize s CounterAcceptor'accept'params
instance C'.FromStruct M'.ConstMsg CounterAcceptor'accept'params where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor'accept'params M'.ConstMsg)
instance Default CounterAcceptor'accept'params where
    def = PH'.defaultStruct
data CounterAcceptor'accept'results
    = CounterAcceptor'accept'results
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CounterAcceptor'accept'results where
    type Cerial msg CounterAcceptor'accept'results = Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor'accept'results msg
    decerialize raw = do
        pure $ CounterAcceptor'accept'results
instance C'.Marshal CounterAcceptor'accept'results where
    marshalInto raw value = do
        case value of
            CounterAcceptor'accept'results -> pure ()
instance C'.Cerialize s CounterAcceptor'accept'results
instance C'.FromStruct M'.ConstMsg CounterAcceptor'accept'results where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CounterAcceptor'accept'results M'.ConstMsg)
instance Default CounterAcceptor'accept'results where
    def = PH'.defaultStruct
data CounterFactory'newCounter'params
    = CounterFactory'newCounter'params
        {start :: Word32}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CounterFactory'newCounter'params where
    type Cerial msg CounterFactory'newCounter'params = Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory'newCounter'params msg
    decerialize raw = do
        CounterFactory'newCounter'params <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_CounterFactory'newCounter'params'start raw)
instance C'.Marshal CounterFactory'newCounter'params where
    marshalInto raw value = do
        case value of
            CounterFactory'newCounter'params{..} -> do
                Capnp.Gen.ById.X832bcc6686a26d56.set_CounterFactory'newCounter'params'start raw start
instance C'.Cerialize s CounterFactory'newCounter'params
instance C'.FromStruct M'.ConstMsg CounterFactory'newCounter'params where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory'newCounter'params M'.ConstMsg)
instance Default CounterFactory'newCounter'params where
    def = PH'.defaultStruct
data CounterFactory'newCounter'results
    = CounterFactory'newCounter'results
        {counter :: CallSequence}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize CounterFactory'newCounter'results where
    type Cerial msg CounterFactory'newCounter'results = Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory'newCounter'results msg
    decerialize raw = do
        CounterFactory'newCounter'results <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_CounterFactory'newCounter'results'counter raw >>= C'.decerialize)
instance C'.Marshal CounterFactory'newCounter'results where
    marshalInto raw value = do
        case value of
            CounterFactory'newCounter'results{..} -> do
                error "TODO: marshal interface fields."
instance C'.Cerialize s CounterFactory'newCounter'results
instance C'.FromStruct M'.ConstMsg CounterFactory'newCounter'results where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.CounterFactory'newCounter'results M'.ConstMsg)
instance Default CounterFactory'newCounter'results where
    def = PH'.defaultStruct
data Echo'echo'params
    = Echo'echo'params
        {in_ :: Text}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Echo'echo'params where
    type Cerial msg Echo'echo'params = Capnp.Gen.ById.X832bcc6686a26d56.Echo'echo'params msg
    decerialize raw = do
        Echo'echo'params <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Echo'echo'params'in_ raw >>= C'.decerialize)
instance C'.Marshal Echo'echo'params where
    marshalInto raw value = do
        case value of
            Echo'echo'params{..} -> do
                field_ <- C'.cerialize (U'.message raw) in_
                Capnp.Gen.ById.X832bcc6686a26d56.set_Echo'echo'params'in_ raw field_
instance C'.Cerialize s Echo'echo'params
instance C'.FromStruct M'.ConstMsg Echo'echo'params where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Echo'echo'params M'.ConstMsg)
instance Default Echo'echo'params where
    def = PH'.defaultStruct
data Echo'echo'results
    = Echo'echo'results
        {out :: Text}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Echo'echo'results where
    type Cerial msg Echo'echo'results = Capnp.Gen.ById.X832bcc6686a26d56.Echo'echo'results msg
    decerialize raw = do
        Echo'echo'results <$>
            (Capnp.Gen.ById.X832bcc6686a26d56.get_Echo'echo'results'out raw >>= C'.decerialize)
instance C'.Marshal Echo'echo'results where
    marshalInto raw value = do
        case value of
            Echo'echo'results{..} -> do
                field_ <- C'.cerialize (U'.message raw) out
                Capnp.Gen.ById.X832bcc6686a26d56.set_Echo'echo'results'out raw field_
instance C'.Cerialize s Echo'echo'results
instance C'.FromStruct M'.ConstMsg Echo'echo'results where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X832bcc6686a26d56.Echo'echo'results M'.ConstMsg)
instance Default Echo'echo'results where
    def = PH'.defaultStruct
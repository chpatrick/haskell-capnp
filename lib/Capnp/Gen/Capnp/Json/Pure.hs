{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
{-# OPTIONS_GHC -Wno-orphans #-}
{-# OPTIONS_GHC -Wno-name-shadowing #-}
{-# OPTIONS_GHC -Wno-unused-matches #-}
{- |
Module: Capnp.Gen.Capnp.Json.Pure
Description: High-level generated module for capnp/json.capnp
This module is the generated code for capnp/json.capnp,
for the high-level api.
-}
module Capnp.Gen.Capnp.Json.Pure (JsonValue(..), JsonValue'Call(..), JsonValue'Field(..)
) where
-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: capnp/json.capnp
import Data.Int
import Data.Word
import Data.Default (Default(def))
import GHC.Generics (Generic)
import Capnp.Basics.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow(throwM))
import Control.Concurrent.STM (atomically)
import Control.Monad.IO.Class (liftIO)
import Capnp.TraversalLimit (MonadLimit, evalLimitT)
import Control.Monad (forM_)
import qualified Capnp.Convert as Convert
import qualified Capnp.Message as M'
import qualified Capnp.Untyped as U'
import qualified Capnp.Untyped.Pure as PU'
import qualified Capnp.GenHelpers.Pure as PH'
import qualified Capnp.Classes as C'
import qualified Data.Vector as V
import qualified Data.ByteString as BS
import qualified Capnp.Gen.ById.X8ef99297a43a5e34
import qualified Capnp.Gen.ById.Xbdf87d7bb8304e81.Pure
import qualified Capnp.Gen.ById.Xbdf87d7bb8304e81
data JsonValue
    = JsonValue'null
    | JsonValue'boolean (Bool)
    | JsonValue'number (Double)
    | JsonValue'string (Text)
    | JsonValue'array (PU'.ListOf (JsonValue))
    | JsonValue'object (PU'.ListOf (JsonValue'Field))
    | JsonValue'call (JsonValue'Call)
    | JsonValue'unknown' Word16
    deriving(Show,Eq,Generic)
instance C'.Decerialize JsonValue where
    type Cerial msg JsonValue = Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue msg
    decerialize raw = do
        raw <- Capnp.Gen.ById.X8ef99297a43a5e34.get_JsonValue' raw
        case raw of
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'null -> pure JsonValue'null
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'boolean val -> pure (JsonValue'boolean val)
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'number val -> pure (JsonValue'number val)
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'string val -> JsonValue'string <$> C'.decerialize val
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'array val -> JsonValue'array <$> C'.decerialize val
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'object val -> JsonValue'object <$> C'.decerialize val
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'call val -> JsonValue'call <$> C'.decerialize val
            Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'unknown' val -> pure $ JsonValue'unknown' val
instance C'.Marshal JsonValue where
    marshalInto raw value = do
        case value of
            JsonValue'null -> Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'null raw
            JsonValue'boolean arg_ -> Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'boolean raw arg_
            JsonValue'number arg_ -> Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'number raw arg_
            JsonValue'string arg_ -> do
                field_ <- C'.cerialize (U'.message raw) arg_
                Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'string raw field_
            JsonValue'array arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X8ef99297a43a5e34.new_JsonValue'array len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            JsonValue'object arg_ -> do
                let len_ = V.length arg_
                field_ <- Capnp.Gen.ById.X8ef99297a43a5e34.new_JsonValue'object len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (arg_ V.! i)
            JsonValue'call arg_ -> do
                field_ <- Capnp.Gen.ById.X8ef99297a43a5e34.new_JsonValue'call raw
                C'.marshalInto field_ arg_
            JsonValue'unknown' arg_ -> Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'unknown' raw arg_
instance C'.Cerialize JsonValue
instance C'.FromStruct M'.ConstMsg JsonValue where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue M'.ConstMsg)
instance Default JsonValue where
    def = PH'.defaultStruct
data JsonValue'Call
    = JsonValue'Call
        {function :: Text,
        params :: PU'.ListOf (JsonValue)}
    deriving(Show,Eq,Generic)
instance C'.Decerialize JsonValue'Call where
    type Cerial msg JsonValue'Call = Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'Call msg
    decerialize raw = do
        JsonValue'Call <$>
            (Capnp.Gen.ById.X8ef99297a43a5e34.get_JsonValue'Call'function raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X8ef99297a43a5e34.get_JsonValue'Call'params raw >>= C'.decerialize)
instance C'.Marshal JsonValue'Call where
    marshalInto raw value = do
        case value of
            JsonValue'Call{..} -> do
                field_ <- C'.cerialize (U'.message raw) function
                Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'Call'function raw field_
                let len_ = V.length params
                field_ <- Capnp.Gen.ById.X8ef99297a43a5e34.new_JsonValue'Call'params len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (params V.! i)
instance C'.Cerialize JsonValue'Call
instance C'.FromStruct M'.ConstMsg JsonValue'Call where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'Call M'.ConstMsg)
instance Default JsonValue'Call where
    def = PH'.defaultStruct
data JsonValue'Field
    = JsonValue'Field
        {name :: Text,
        value :: JsonValue}
    deriving(Show,Eq,Generic)
instance C'.Decerialize JsonValue'Field where
    type Cerial msg JsonValue'Field = Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'Field msg
    decerialize raw = do
        JsonValue'Field <$>
            (Capnp.Gen.ById.X8ef99297a43a5e34.get_JsonValue'Field'name raw >>= C'.decerialize) <*>
            (Capnp.Gen.ById.X8ef99297a43a5e34.get_JsonValue'Field'value raw >>= C'.decerialize)
instance C'.Marshal JsonValue'Field where
    marshalInto raw value = do
        case value of
            JsonValue'Field{..} -> do
                field_ <- C'.cerialize (U'.message raw) name
                Capnp.Gen.ById.X8ef99297a43a5e34.set_JsonValue'Field'name raw field_
                field_ <- Capnp.Gen.ById.X8ef99297a43a5e34.new_JsonValue'Field'value raw
                C'.marshalInto field_ value
instance C'.Cerialize JsonValue'Field
instance C'.FromStruct M'.ConstMsg JsonValue'Field where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.Gen.ById.X8ef99297a43a5e34.JsonValue'Field M'.ConstMsg)
instance Default JsonValue'Field where
    def = PH'.defaultStruct
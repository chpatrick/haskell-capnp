{-# OPTIONS_GHC -Wno-unused-imports #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module Capnp.ById.Xa93fc509624c72d9 where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: capnp/schema.capnp

import Data.Int
import Data.Word
import qualified Data.Bits
import qualified Data.Maybe
import qualified Codec.Capnp
import qualified Data.Capnp.BuiltinTypes
import qualified Data.Capnp.TraversalLimit
import qualified Data.Capnp.Untyped

import qualified Capnp.ById.Xbdf87d7bb8304e81

data Type'anyPointer'unconstrained
    = Type'anyPointer'unconstrained'anyKind
    | Type'anyPointer'unconstrained'struct
    | Type'anyPointer'unconstrained'list
    | Type'anyPointer'unconstrained'capability
    | Type'anyPointer'unconstrained'unknown' Word16





instance Codec.Capnp.IsStruct Type'anyPointer'unconstrained where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 16 0
        case tag of
            3 -> pure Type'anyPointer'unconstrained'capability
            2 -> pure Type'anyPointer'unconstrained'list
            1 -> pure Type'anyPointer'unconstrained'struct
            0 -> pure Type'anyPointer'unconstrained'anyKind
            _ -> pure $ Type'anyPointer'unconstrained'unknown' tag

instance Codec.Capnp.IsPtr Type'anyPointer'unconstrained where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer'unconstrained) where
    fromPtr = Codec.Capnp.structListPtr

newtype Brand = Brand Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Brand where
    fromStruct = pure . Brand
instance Codec.Capnp.IsPtr Brand where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Brand) where
    fromPtr = Codec.Capnp.structListPtr
get_Brand'scopes :: Data.Capnp.Untyped.ReadCtx m => Brand -> m (Data.Capnp.Untyped.ListOf (Brand'Scope ))
get_Brand'scopes (Brand struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Brand'scopes :: Data.Capnp.Untyped.ReadCtx m => Brand -> m Bool
has_Brand'scopes(Brand struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Method = Method Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Method where
    fromStruct = pure . Method
instance Codec.Capnp.IsPtr Method where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Method) where
    fromPtr = Codec.Capnp.structListPtr
get_Method'name :: Data.Capnp.Untyped.ReadCtx m => Method -> m Data.Capnp.BuiltinTypes.Text
get_Method'name (Method struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Method'name :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'name(Method struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Method'codeOrder :: Data.Capnp.Untyped.ReadCtx m => Method -> m Word16
get_Method'codeOrder (Method struct) = Codec.Capnp.getWordField struct 0 0 0

has_Method'codeOrder :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'codeOrder(Method struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Method'paramStructType :: Data.Capnp.Untyped.ReadCtx m => Method -> m Word64
get_Method'paramStructType (Method struct) = Codec.Capnp.getWordField struct 1 0 0

has_Method'paramStructType :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'paramStructType(Method struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Method'resultStructType :: Data.Capnp.Untyped.ReadCtx m => Method -> m Word64
get_Method'resultStructType (Method struct) = Codec.Capnp.getWordField struct 2 0 0

has_Method'resultStructType :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'resultStructType(Method struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Method'annotations :: Data.Capnp.Untyped.ReadCtx m => Method -> m (Data.Capnp.Untyped.ListOf (Annotation ))
get_Method'annotations (Method struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Method'annotations :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'annotations(Method struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
get_Method'paramBrand :: Data.Capnp.Untyped.ReadCtx m => Method -> m (Brand )
get_Method'paramBrand (Method struct) =
    Data.Capnp.Untyped.getPtr 2 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Method'paramBrand :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'paramBrand(Method struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 2 struct
get_Method'resultBrand :: Data.Capnp.Untyped.ReadCtx m => Method -> m (Brand )
get_Method'resultBrand (Method struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Method'resultBrand :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'resultBrand(Method struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
get_Method'implicitParameters :: Data.Capnp.Untyped.ReadCtx m => Method -> m (Data.Capnp.Untyped.ListOf (Node'Parameter ))
get_Method'implicitParameters (Method struct) =
    Data.Capnp.Untyped.getPtr 4 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Method'implicitParameters :: Data.Capnp.Untyped.ReadCtx m => Method -> m Bool
has_Method'implicitParameters(Method struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 4 struct
newtype Enumerant = Enumerant Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Enumerant where
    fromStruct = pure . Enumerant
instance Codec.Capnp.IsPtr Enumerant where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Enumerant) where
    fromPtr = Codec.Capnp.structListPtr
get_Enumerant'name :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m Data.Capnp.BuiltinTypes.Text
get_Enumerant'name (Enumerant struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Enumerant'name :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m Bool
has_Enumerant'name(Enumerant struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Enumerant'codeOrder :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m Word16
get_Enumerant'codeOrder (Enumerant struct) = Codec.Capnp.getWordField struct 0 0 0

has_Enumerant'codeOrder :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m Bool
has_Enumerant'codeOrder(Enumerant struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Enumerant'annotations :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m (Data.Capnp.Untyped.ListOf (Annotation ))
get_Enumerant'annotations (Enumerant struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Enumerant'annotations :: Data.Capnp.Untyped.ReadCtx m => Enumerant -> m Bool
has_Enumerant'annotations(Enumerant struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
field'noDiscriminant :: Word16
field'noDiscriminant = Codec.Capnp.fromWord 65535

newtype Field = Field Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Field where
    fromStruct = pure . Field
instance Codec.Capnp.IsPtr Field where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Field) where
    fromPtr = Codec.Capnp.structListPtr
get_Field''name :: Data.Capnp.Untyped.ReadCtx m => Field -> m Data.Capnp.BuiltinTypes.Text
get_Field''name (Field struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Field''name :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''name(Field struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Field''codeOrder :: Data.Capnp.Untyped.ReadCtx m => Field -> m Word16
get_Field''codeOrder (Field struct) = Codec.Capnp.getWordField struct 0 0 0

has_Field''codeOrder :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''codeOrder(Field struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Field''annotations :: Data.Capnp.Untyped.ReadCtx m => Field -> m (Data.Capnp.Untyped.ListOf (Annotation ))
get_Field''annotations (Field struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Field''annotations :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''annotations(Field struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
get_Field''discriminantValue :: Data.Capnp.Untyped.ReadCtx m => Field -> m Word16
get_Field''discriminantValue (Field struct) = Codec.Capnp.getWordField struct 0 16 65535

has_Field''discriminantValue :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''discriminantValue(Field struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Field''ordinal :: Data.Capnp.Untyped.ReadCtx m => Field -> m (Field'ordinal )
get_Field''ordinal (Field struct) = Codec.Capnp.fromStruct struct

has_Field''ordinal :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''ordinal(Field struct) = pure True
get_Field''union' :: Data.Capnp.Untyped.ReadCtx m => Field -> m (Field' )
get_Field''union' (Field struct) = Codec.Capnp.fromStruct struct

has_Field''union' :: Data.Capnp.Untyped.ReadCtx m => Field -> m Bool
has_Field''union'(Field struct) = pure True
data Field'
    = Field'slot Field'slot'group'
    | Field'group Field'group'group'
    | Field'unknown' Word16
newtype Field'slot'group' = Field'slot'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Field'slot'group' where
    fromStruct = pure . Field'slot'group'
instance Codec.Capnp.IsPtr Field'slot'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Field'slot'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Field'slot'offset :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Word32
get_Field'slot'offset (Field'slot'group' struct) = Codec.Capnp.getWordField struct 0 32 0

has_Field'slot'offset :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Bool
has_Field'slot'offset(Field'slot'group' struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Field'slot'type_ :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m (Type )
get_Field'slot'type_ (Field'slot'group' struct) =
    Data.Capnp.Untyped.getPtr 2 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Field'slot'type_ :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Bool
has_Field'slot'type_(Field'slot'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 2 struct
get_Field'slot'defaultValue :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m (Value )
get_Field'slot'defaultValue (Field'slot'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Field'slot'defaultValue :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Bool
has_Field'slot'defaultValue(Field'slot'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
get_Field'slot'hadExplicitDefault :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Bool
get_Field'slot'hadExplicitDefault (Field'slot'group' struct) = Codec.Capnp.getWordField struct 2 0 0

has_Field'slot'hadExplicitDefault :: Data.Capnp.Untyped.ReadCtx m => Field'slot'group' -> m Bool
has_Field'slot'hadExplicitDefault(Field'slot'group' struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Field'group'group' = Field'group'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Field'group'group' where
    fromStruct = pure . Field'group'group'
instance Codec.Capnp.IsPtr Field'group'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Field'group'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Field'group'typeId :: Data.Capnp.Untyped.ReadCtx m => Field'group'group' -> m Word64
get_Field'group'typeId (Field'group'group' struct) = Codec.Capnp.getWordField struct 2 0 0

has_Field'group'typeId :: Data.Capnp.Untyped.ReadCtx m => Field'group'group' -> m Bool
has_Field'group'typeId(Field'group'group' struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)

instance Codec.Capnp.IsStruct Field' where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 0 0
        case tag of
            1 -> Field'group <$> Codec.Capnp.fromStruct struct
            0 -> Field'slot <$> Codec.Capnp.fromStruct struct
            _ -> pure $ Field'unknown' tag

instance Codec.Capnp.IsPtr Field' where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Field') where
    fromPtr = Codec.Capnp.structListPtr

newtype Superclass = Superclass Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Superclass where
    fromStruct = pure . Superclass
instance Codec.Capnp.IsPtr Superclass where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Superclass) where
    fromPtr = Codec.Capnp.structListPtr
get_Superclass'id :: Data.Capnp.Untyped.ReadCtx m => Superclass -> m Word64
get_Superclass'id (Superclass struct) = Codec.Capnp.getWordField struct 0 0 0

has_Superclass'id :: Data.Capnp.Untyped.ReadCtx m => Superclass -> m Bool
has_Superclass'id(Superclass struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Superclass'brand :: Data.Capnp.Untyped.ReadCtx m => Superclass -> m (Brand )
get_Superclass'brand (Superclass struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Superclass'brand :: Data.Capnp.Untyped.ReadCtx m => Superclass -> m Bool
has_Superclass'brand(Superclass struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Brand'Scope = Brand'Scope Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Brand'Scope where
    fromStruct = pure . Brand'Scope
instance Codec.Capnp.IsPtr Brand'Scope where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Brand'Scope) where
    fromPtr = Codec.Capnp.structListPtr
get_Brand'Scope''scopeId :: Data.Capnp.Untyped.ReadCtx m => Brand'Scope -> m Word64
get_Brand'Scope''scopeId (Brand'Scope struct) = Codec.Capnp.getWordField struct 0 0 0

has_Brand'Scope''scopeId :: Data.Capnp.Untyped.ReadCtx m => Brand'Scope -> m Bool
has_Brand'Scope''scopeId(Brand'Scope struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Brand'Scope''union' :: Data.Capnp.Untyped.ReadCtx m => Brand'Scope -> m (Brand'Scope' )
get_Brand'Scope''union' (Brand'Scope struct) = Codec.Capnp.fromStruct struct

has_Brand'Scope''union' :: Data.Capnp.Untyped.ReadCtx m => Brand'Scope -> m Bool
has_Brand'Scope''union'(Brand'Scope struct) = pure True
data Brand'Scope'
    = Brand'Scope'bind (Data.Capnp.Untyped.ListOf (Brand'Binding ))
    | Brand'Scope'inherit
    | Brand'Scope'unknown' Word16



instance Codec.Capnp.IsStruct Brand'Scope' where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 0 0
        case tag of
            1 -> pure Brand'Scope'inherit
            0 -> Brand'Scope'bind <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            _ -> pure $ Brand'Scope'unknown' tag

instance Codec.Capnp.IsPtr Brand'Scope' where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Brand'Scope') where
    fromPtr = Codec.Capnp.structListPtr

newtype CodeGeneratorRequest'RequestedFile'Import = CodeGeneratorRequest'RequestedFile'Import Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct CodeGeneratorRequest'RequestedFile'Import where
    fromStruct = pure . CodeGeneratorRequest'RequestedFile'Import
instance Codec.Capnp.IsPtr CodeGeneratorRequest'RequestedFile'Import where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf CodeGeneratorRequest'RequestedFile'Import) where
    fromPtr = Codec.Capnp.structListPtr
get_CodeGeneratorRequest'RequestedFile'Import'id :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile'Import -> m Word64
get_CodeGeneratorRequest'RequestedFile'Import'id (CodeGeneratorRequest'RequestedFile'Import struct) = Codec.Capnp.getWordField struct 0 0 0

has_CodeGeneratorRequest'RequestedFile'Import'id :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile'Import -> m Bool
has_CodeGeneratorRequest'RequestedFile'Import'id(CodeGeneratorRequest'RequestedFile'Import struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_CodeGeneratorRequest'RequestedFile'Import'name :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile'Import -> m Data.Capnp.BuiltinTypes.Text
get_CodeGeneratorRequest'RequestedFile'Import'name (CodeGeneratorRequest'RequestedFile'Import struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'RequestedFile'Import'name :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile'Import -> m Bool
has_CodeGeneratorRequest'RequestedFile'Import'name(CodeGeneratorRequest'RequestedFile'Import struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Node'Parameter = Node'Parameter Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'Parameter where
    fromStruct = pure . Node'Parameter
instance Codec.Capnp.IsPtr Node'Parameter where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'Parameter) where
    fromPtr = Codec.Capnp.structListPtr
get_Node'Parameter'name :: Data.Capnp.Untyped.ReadCtx m => Node'Parameter -> m Data.Capnp.BuiltinTypes.Text
get_Node'Parameter'name (Node'Parameter struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'Parameter'name :: Data.Capnp.Untyped.ReadCtx m => Node'Parameter -> m Bool
has_Node'Parameter'name(Node'Parameter struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
data Field'ordinal
    = Field'ordinal'implicit
    | Field'ordinal'explicit Word16
    | Field'ordinal'unknown' Word16



instance Codec.Capnp.IsStruct Field'ordinal where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 16 0
        case tag of
            1 -> Field'ordinal'explicit <$>  Codec.Capnp.getWordField struct 1 32 0
            0 -> pure Field'ordinal'implicit
            _ -> pure $ Field'ordinal'unknown' tag

instance Codec.Capnp.IsPtr Field'ordinal where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Field'ordinal) where
    fromPtr = Codec.Capnp.structListPtr

newtype CodeGeneratorRequest = CodeGeneratorRequest Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct CodeGeneratorRequest where
    fromStruct = pure . CodeGeneratorRequest
instance Codec.Capnp.IsPtr CodeGeneratorRequest where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf CodeGeneratorRequest) where
    fromPtr = Codec.Capnp.structListPtr
get_CodeGeneratorRequest'nodes :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m (Data.Capnp.Untyped.ListOf (Node ))
get_CodeGeneratorRequest'nodes (CodeGeneratorRequest struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'nodes :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m Bool
has_CodeGeneratorRequest'nodes(CodeGeneratorRequest struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_CodeGeneratorRequest'requestedFiles :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m (Data.Capnp.Untyped.ListOf (CodeGeneratorRequest'RequestedFile ))
get_CodeGeneratorRequest'requestedFiles (CodeGeneratorRequest struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'requestedFiles :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m Bool
has_CodeGeneratorRequest'requestedFiles(CodeGeneratorRequest struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
get_CodeGeneratorRequest'capnpVersion :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m (CapnpVersion )
get_CodeGeneratorRequest'capnpVersion (CodeGeneratorRequest struct) =
    Data.Capnp.Untyped.getPtr 2 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'capnpVersion :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest -> m Bool
has_CodeGeneratorRequest'capnpVersion(CodeGeneratorRequest struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 2 struct
data Type'anyPointer
    = Type'anyPointer'unconstrained Type'anyPointer'unconstrained'group'
    | Type'anyPointer'parameter Type'anyPointer'parameter'group'
    | Type'anyPointer'implicitMethodParameter Type'anyPointer'implicitMethodParameter'group'
    | Type'anyPointer'unknown' Word16
newtype Type'anyPointer'unconstrained'group' = Type'anyPointer'unconstrained'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'anyPointer'unconstrained'group' where
    fromStruct = pure . Type'anyPointer'unconstrained'group'
instance Codec.Capnp.IsPtr Type'anyPointer'unconstrained'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer'unconstrained'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'anyPointer'unconstrained'union' :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'unconstrained'group' -> m (Type'anyPointer'unconstrained )
get_Type'anyPointer'unconstrained'union' (Type'anyPointer'unconstrained'group' struct) = Codec.Capnp.fromStruct struct

has_Type'anyPointer'unconstrained'union' :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'unconstrained'group' -> m Bool
has_Type'anyPointer'unconstrained'union'(Type'anyPointer'unconstrained'group' struct) = pure True
newtype Type'anyPointer'parameter'group' = Type'anyPointer'parameter'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'anyPointer'parameter'group' where
    fromStruct = pure . Type'anyPointer'parameter'group'
instance Codec.Capnp.IsPtr Type'anyPointer'parameter'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer'parameter'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'anyPointer'parameter'scopeId :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'parameter'group' -> m Word64
get_Type'anyPointer'parameter'scopeId (Type'anyPointer'parameter'group' struct) = Codec.Capnp.getWordField struct 2 0 0

has_Type'anyPointer'parameter'scopeId :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'parameter'group' -> m Bool
has_Type'anyPointer'parameter'scopeId(Type'anyPointer'parameter'group' struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Type'anyPointer'parameter'parameterIndex :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'parameter'group' -> m Word16
get_Type'anyPointer'parameter'parameterIndex (Type'anyPointer'parameter'group' struct) = Codec.Capnp.getWordField struct 1 16 0

has_Type'anyPointer'parameter'parameterIndex :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'parameter'group' -> m Bool
has_Type'anyPointer'parameter'parameterIndex(Type'anyPointer'parameter'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Type'anyPointer'implicitMethodParameter'group' = Type'anyPointer'implicitMethodParameter'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'anyPointer'implicitMethodParameter'group' where
    fromStruct = pure . Type'anyPointer'implicitMethodParameter'group'
instance Codec.Capnp.IsPtr Type'anyPointer'implicitMethodParameter'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer'implicitMethodParameter'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'anyPointer'implicitMethodParameter'parameterIndex :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'implicitMethodParameter'group' -> m Word16
get_Type'anyPointer'implicitMethodParameter'parameterIndex (Type'anyPointer'implicitMethodParameter'group' struct) = Codec.Capnp.getWordField struct 1 16 0

has_Type'anyPointer'implicitMethodParameter'parameterIndex :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'implicitMethodParameter'group' -> m Bool
has_Type'anyPointer'implicitMethodParameter'parameterIndex(Type'anyPointer'implicitMethodParameter'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)

instance Codec.Capnp.IsStruct Type'anyPointer where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 0 0
        case tag of
            2 -> Type'anyPointer'implicitMethodParameter <$> Codec.Capnp.fromStruct struct
            1 -> Type'anyPointer'parameter <$> Codec.Capnp.fromStruct struct
            0 -> Type'anyPointer'unconstrained <$> Codec.Capnp.fromStruct struct
            _ -> pure $ Type'anyPointer'unknown' tag

instance Codec.Capnp.IsPtr Type'anyPointer where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer) where
    fromPtr = Codec.Capnp.structListPtr

data Brand'Binding
    = Brand'Binding'unbound
    | Brand'Binding'type_ (Type )
    | Brand'Binding'unknown' Word16



instance Codec.Capnp.IsStruct Brand'Binding where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            1 -> Brand'Binding'type_ <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            0 -> pure Brand'Binding'unbound
            _ -> pure $ Brand'Binding'unknown' tag

instance Codec.Capnp.IsPtr Brand'Binding where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Brand'Binding) where
    fromPtr = Codec.Capnp.structListPtr

data Value
    = Value'void
    | Value'bool Bool
    | Value'int8 Int8
    | Value'int16 Int16
    | Value'int32 Int32
    | Value'int64 Int64
    | Value'uint8 Word8
    | Value'uint16 Word16
    | Value'uint32 Word32
    | Value'uint64 Word64
    | Value'float32 Float
    | Value'float64 Double
    | Value'text Data.Capnp.BuiltinTypes.Text
    | Value'data_ Data.Capnp.BuiltinTypes.Data
    | Value'list (Maybe Data.Capnp.Untyped.Ptr)
    | Value'enum Word16
    | Value'struct (Maybe Data.Capnp.Untyped.Ptr)
    | Value'interface
    | Value'anyPointer (Maybe Data.Capnp.Untyped.Ptr)
    | Value'unknown' Word16




















instance Codec.Capnp.IsStruct Value where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            18 -> Value'anyPointer <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            17 -> pure Value'interface
            16 -> Value'struct <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            15 -> Value'enum <$>  Codec.Capnp.getWordField struct 0 16 0
            14 -> Value'list <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            13 -> Value'data_ <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            12 -> Value'text <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            11 -> Value'float64 <$>  Codec.Capnp.getWordField struct 1 0 0
            10 -> Value'float32 <$>  Codec.Capnp.getWordField struct 0 32 0
            9 -> Value'uint64 <$>  Codec.Capnp.getWordField struct 1 0 0
            8 -> Value'uint32 <$>  Codec.Capnp.getWordField struct 0 32 0
            7 -> Value'uint16 <$>  Codec.Capnp.getWordField struct 0 16 0
            6 -> Value'uint8 <$>  Codec.Capnp.getWordField struct 0 16 0
            5 -> Value'int64 <$>  Codec.Capnp.getWordField struct 1 0 0
            4 -> Value'int32 <$>  Codec.Capnp.getWordField struct 0 32 0
            3 -> Value'int16 <$>  Codec.Capnp.getWordField struct 0 16 0
            2 -> Value'int8 <$>  Codec.Capnp.getWordField struct 0 16 0
            1 -> Value'bool <$>  Codec.Capnp.getWordField struct 0 16 0
            0 -> pure Value'void
            _ -> pure $ Value'unknown' tag

instance Codec.Capnp.IsPtr Value where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Value) where
    fromPtr = Codec.Capnp.structListPtr

newtype CodeGeneratorRequest'RequestedFile = CodeGeneratorRequest'RequestedFile Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct CodeGeneratorRequest'RequestedFile where
    fromStruct = pure . CodeGeneratorRequest'RequestedFile
instance Codec.Capnp.IsPtr CodeGeneratorRequest'RequestedFile where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf CodeGeneratorRequest'RequestedFile) where
    fromPtr = Codec.Capnp.structListPtr
get_CodeGeneratorRequest'RequestedFile'id :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m Word64
get_CodeGeneratorRequest'RequestedFile'id (CodeGeneratorRequest'RequestedFile struct) = Codec.Capnp.getWordField struct 0 0 0

has_CodeGeneratorRequest'RequestedFile'id :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m Bool
has_CodeGeneratorRequest'RequestedFile'id(CodeGeneratorRequest'RequestedFile struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_CodeGeneratorRequest'RequestedFile'filename :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m Data.Capnp.BuiltinTypes.Text
get_CodeGeneratorRequest'RequestedFile'filename (CodeGeneratorRequest'RequestedFile struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'RequestedFile'filename :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m Bool
has_CodeGeneratorRequest'RequestedFile'filename(CodeGeneratorRequest'RequestedFile struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_CodeGeneratorRequest'RequestedFile'imports :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m (Data.Capnp.Untyped.ListOf (CodeGeneratorRequest'RequestedFile'Import ))
get_CodeGeneratorRequest'RequestedFile'imports (CodeGeneratorRequest'RequestedFile struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_CodeGeneratorRequest'RequestedFile'imports :: Data.Capnp.Untyped.ReadCtx m => CodeGeneratorRequest'RequestedFile -> m Bool
has_CodeGeneratorRequest'RequestedFile'imports(CodeGeneratorRequest'RequestedFile struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
data Type
    = Type'void
    | Type'bool
    | Type'int8
    | Type'int16
    | Type'int32
    | Type'int64
    | Type'uint8
    | Type'uint16
    | Type'uint32
    | Type'uint64
    | Type'float32
    | Type'float64
    | Type'text
    | Type'data_
    | Type'list Type'list'group'
    | Type'enum Type'enum'group'
    | Type'struct Type'struct'group'
    | Type'interface Type'interface'group'
    | Type'anyPointer Type'anyPointer'group'
    | Type'unknown' Word16














newtype Type'list'group' = Type'list'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'list'group' where
    fromStruct = pure . Type'list'group'
instance Codec.Capnp.IsPtr Type'list'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'list'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'list'elementType :: Data.Capnp.Untyped.ReadCtx m => Type'list'group' -> m (Type )
get_Type'list'elementType (Type'list'group' struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Type'list'elementType :: Data.Capnp.Untyped.ReadCtx m => Type'list'group' -> m Bool
has_Type'list'elementType(Type'list'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Type'enum'group' = Type'enum'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'enum'group' where
    fromStruct = pure . Type'enum'group'
instance Codec.Capnp.IsPtr Type'enum'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'enum'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'enum'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'enum'group' -> m Word64
get_Type'enum'typeId (Type'enum'group' struct) = Codec.Capnp.getWordField struct 1 0 0

has_Type'enum'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'enum'group' -> m Bool
has_Type'enum'typeId(Type'enum'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Type'enum'brand :: Data.Capnp.Untyped.ReadCtx m => Type'enum'group' -> m (Brand )
get_Type'enum'brand (Type'enum'group' struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Type'enum'brand :: Data.Capnp.Untyped.ReadCtx m => Type'enum'group' -> m Bool
has_Type'enum'brand(Type'enum'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Type'struct'group' = Type'struct'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'struct'group' where
    fromStruct = pure . Type'struct'group'
instance Codec.Capnp.IsPtr Type'struct'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'struct'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'struct'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'struct'group' -> m Word64
get_Type'struct'typeId (Type'struct'group' struct) = Codec.Capnp.getWordField struct 1 0 0

has_Type'struct'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'struct'group' -> m Bool
has_Type'struct'typeId(Type'struct'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Type'struct'brand :: Data.Capnp.Untyped.ReadCtx m => Type'struct'group' -> m (Brand )
get_Type'struct'brand (Type'struct'group' struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Type'struct'brand :: Data.Capnp.Untyped.ReadCtx m => Type'struct'group' -> m Bool
has_Type'struct'brand(Type'struct'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Type'interface'group' = Type'interface'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'interface'group' where
    fromStruct = pure . Type'interface'group'
instance Codec.Capnp.IsPtr Type'interface'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'interface'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'interface'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'interface'group' -> m Word64
get_Type'interface'typeId (Type'interface'group' struct) = Codec.Capnp.getWordField struct 1 0 0

has_Type'interface'typeId :: Data.Capnp.Untyped.ReadCtx m => Type'interface'group' -> m Bool
has_Type'interface'typeId(Type'interface'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Type'interface'brand :: Data.Capnp.Untyped.ReadCtx m => Type'interface'group' -> m (Brand )
get_Type'interface'brand (Type'interface'group' struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Type'interface'brand :: Data.Capnp.Untyped.ReadCtx m => Type'interface'group' -> m Bool
has_Type'interface'brand(Type'interface'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
newtype Type'anyPointer'group' = Type'anyPointer'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Type'anyPointer'group' where
    fromStruct = pure . Type'anyPointer'group'
instance Codec.Capnp.IsPtr Type'anyPointer'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type'anyPointer'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Type'anyPointer'union' :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'group' -> m (Type'anyPointer )
get_Type'anyPointer'union' (Type'anyPointer'group' struct) = Codec.Capnp.fromStruct struct

has_Type'anyPointer'union' :: Data.Capnp.Untyped.ReadCtx m => Type'anyPointer'group' -> m Bool
has_Type'anyPointer'union'(Type'anyPointer'group' struct) = pure True

instance Codec.Capnp.IsStruct Type where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            18 -> Type'anyPointer <$> Codec.Capnp.fromStruct struct
            17 -> Type'interface <$> Codec.Capnp.fromStruct struct
            16 -> Type'struct <$> Codec.Capnp.fromStruct struct
            15 -> Type'enum <$> Codec.Capnp.fromStruct struct
            14 -> Type'list <$> Codec.Capnp.fromStruct struct
            13 -> pure Type'data_
            12 -> pure Type'text
            11 -> pure Type'float64
            10 -> pure Type'float32
            9 -> pure Type'uint64
            8 -> pure Type'uint32
            7 -> pure Type'uint16
            6 -> pure Type'uint8
            5 -> pure Type'int64
            4 -> pure Type'int32
            3 -> pure Type'int16
            2 -> pure Type'int8
            1 -> pure Type'bool
            0 -> pure Type'void
            _ -> pure $ Type'unknown' tag

instance Codec.Capnp.IsPtr Type where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Type) where
    fromPtr = Codec.Capnp.structListPtr

data ElementSize
    = ElementSize'empty
    | ElementSize'bit
    | ElementSize'byte
    | ElementSize'twoBytes
    | ElementSize'fourBytes
    | ElementSize'eightBytes
    | ElementSize'pointer
    | ElementSize'inlineComposite
    | ElementSize'unknown' Word16
instance Enum ElementSize where
    toEnum = Codec.Capnp.fromWord . fromIntegral
    fromEnum = fromIntegral . Codec.Capnp.toWord


instance Codec.Capnp.IsWord ElementSize where
    fromWord n = go (fromIntegral n :: Word16)
      where
        go 7 = ElementSize'inlineComposite
        go 6 = ElementSize'pointer
        go 5 = ElementSize'eightBytes
        go 4 = ElementSize'fourBytes
        go 3 = ElementSize'twoBytes
        go 2 = ElementSize'byte
        go 1 = ElementSize'bit
        go 0 = ElementSize'empty
        go tag = ElementSize'unknown' (fromIntegral tag)
    toWord ElementSize'inlineComposite = 7
    toWord ElementSize'pointer = 6
    toWord ElementSize'eightBytes = 5
    toWord ElementSize'fourBytes = 4
    toWord ElementSize'twoBytes = 3
    toWord ElementSize'byte = 2
    toWord ElementSize'bit = 1
    toWord ElementSize'empty = 0
    toWord (ElementSize'unknown' tag) = fromIntegral tag
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf ElementSize) where
    fromPtr msg ptr = fmap
       (fmap (toEnum . (fromIntegral :: Word16 -> Int)))
       (Codec.Capnp.fromPtr msg ptr)

newtype CapnpVersion = CapnpVersion Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct CapnpVersion where
    fromStruct = pure . CapnpVersion
instance Codec.Capnp.IsPtr CapnpVersion where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf CapnpVersion) where
    fromPtr = Codec.Capnp.structListPtr
get_CapnpVersion'major :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Word16
get_CapnpVersion'major (CapnpVersion struct) = Codec.Capnp.getWordField struct 0 0 0

has_CapnpVersion'major :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Bool
has_CapnpVersion'major(CapnpVersion struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_CapnpVersion'minor :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Word8
get_CapnpVersion'minor (CapnpVersion struct) = Codec.Capnp.getWordField struct 0 16 0

has_CapnpVersion'minor :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Bool
has_CapnpVersion'minor(CapnpVersion struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_CapnpVersion'micro :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Word8
get_CapnpVersion'micro (CapnpVersion struct) = Codec.Capnp.getWordField struct 0 24 0

has_CapnpVersion'micro :: Data.Capnp.Untyped.ReadCtx m => CapnpVersion -> m Bool
has_CapnpVersion'micro(CapnpVersion struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Node'NestedNode = Node'NestedNode Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'NestedNode where
    fromStruct = pure . Node'NestedNode
instance Codec.Capnp.IsPtr Node'NestedNode where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'NestedNode) where
    fromPtr = Codec.Capnp.structListPtr
get_Node'NestedNode'name :: Data.Capnp.Untyped.ReadCtx m => Node'NestedNode -> m Data.Capnp.BuiltinTypes.Text
get_Node'NestedNode'name (Node'NestedNode struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'NestedNode'name :: Data.Capnp.Untyped.ReadCtx m => Node'NestedNode -> m Bool
has_Node'NestedNode'name(Node'NestedNode struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Node'NestedNode'id :: Data.Capnp.Untyped.ReadCtx m => Node'NestedNode -> m Word64
get_Node'NestedNode'id (Node'NestedNode struct) = Codec.Capnp.getWordField struct 0 0 0

has_Node'NestedNode'id :: Data.Capnp.Untyped.ReadCtx m => Node'NestedNode -> m Bool
has_Node'NestedNode'id(Node'NestedNode struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Node = Node Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node where
    fromStruct = pure . Node
instance Codec.Capnp.IsPtr Node where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node) where
    fromPtr = Codec.Capnp.structListPtr
get_Node''id :: Data.Capnp.Untyped.ReadCtx m => Node -> m Word64
get_Node''id (Node struct) = Codec.Capnp.getWordField struct 0 0 0

has_Node''id :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''id(Node struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node''displayName :: Data.Capnp.Untyped.ReadCtx m => Node -> m Data.Capnp.BuiltinTypes.Text
get_Node''displayName (Node struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node''displayName :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''displayName(Node struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Node''displayNamePrefixLength :: Data.Capnp.Untyped.ReadCtx m => Node -> m Word32
get_Node''displayNamePrefixLength (Node struct) = Codec.Capnp.getWordField struct 1 0 0

has_Node''displayNamePrefixLength :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''displayNamePrefixLength(Node struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node''scopeId :: Data.Capnp.Untyped.ReadCtx m => Node -> m Word64
get_Node''scopeId (Node struct) = Codec.Capnp.getWordField struct 2 0 0

has_Node''scopeId :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''scopeId(Node struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node''nestedNodes :: Data.Capnp.Untyped.ReadCtx m => Node -> m (Data.Capnp.Untyped.ListOf (Node'NestedNode ))
get_Node''nestedNodes (Node struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node''nestedNodes :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''nestedNodes(Node struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
get_Node''annotations :: Data.Capnp.Untyped.ReadCtx m => Node -> m (Data.Capnp.Untyped.ListOf (Annotation ))
get_Node''annotations (Node struct) =
    Data.Capnp.Untyped.getPtr 2 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node''annotations :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''annotations(Node struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 2 struct
get_Node''parameters :: Data.Capnp.Untyped.ReadCtx m => Node -> m (Data.Capnp.Untyped.ListOf (Node'Parameter ))
get_Node''parameters (Node struct) =
    Data.Capnp.Untyped.getPtr 5 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node''parameters :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''parameters(Node struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 5 struct
get_Node''isGeneric :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
get_Node''isGeneric (Node struct) = Codec.Capnp.getWordField struct 4 32 0

has_Node''isGeneric :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''isGeneric(Node struct) = pure $ 4 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node''union' :: Data.Capnp.Untyped.ReadCtx m => Node -> m (Node' )
get_Node''union' (Node struct) = Codec.Capnp.fromStruct struct

has_Node''union' :: Data.Capnp.Untyped.ReadCtx m => Node -> m Bool
has_Node''union'(Node struct) = pure True
data Node'
    = Node'file
    | Node'struct Node'struct'group'
    | Node'enum Node'enum'group'
    | Node'interface Node'interface'group'
    | Node'const Node'const'group'
    | Node'annotation Node'annotation'group'
    | Node'unknown' Word16

newtype Node'struct'group' = Node'struct'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'struct'group' where
    fromStruct = pure . Node'struct'group'
instance Codec.Capnp.IsPtr Node'struct'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'struct'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Node'struct'dataWordCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Word16
get_Node'struct'dataWordCount (Node'struct'group' struct) = Codec.Capnp.getWordField struct 1 48 0

has_Node'struct'dataWordCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'dataWordCount(Node'struct'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'pointerCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Word16
get_Node'struct'pointerCount (Node'struct'group' struct) = Codec.Capnp.getWordField struct 3 0 0

has_Node'struct'pointerCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'pointerCount(Node'struct'group' struct) = pure $ 3 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'preferredListEncoding :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m ElementSize
get_Node'struct'preferredListEncoding (Node'struct'group' struct) = Codec.Capnp.getWordField struct 3 16 0

has_Node'struct'preferredListEncoding :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'preferredListEncoding(Node'struct'group' struct) = pure $ 3 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'isGroup :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
get_Node'struct'isGroup (Node'struct'group' struct) = Codec.Capnp.getWordField struct 3 32 0

has_Node'struct'isGroup :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'isGroup(Node'struct'group' struct) = pure $ 3 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'discriminantCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Word16
get_Node'struct'discriminantCount (Node'struct'group' struct) = Codec.Capnp.getWordField struct 3 48 0

has_Node'struct'discriminantCount :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'discriminantCount(Node'struct'group' struct) = pure $ 3 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'discriminantOffset :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Word32
get_Node'struct'discriminantOffset (Node'struct'group' struct) = Codec.Capnp.getWordField struct 4 0 0

has_Node'struct'discriminantOffset :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'discriminantOffset(Node'struct'group' struct) = pure $ 4 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'struct'fields :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m (Data.Capnp.Untyped.ListOf (Field ))
get_Node'struct'fields (Node'struct'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'struct'fields :: Data.Capnp.Untyped.ReadCtx m => Node'struct'group' -> m Bool
has_Node'struct'fields(Node'struct'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
newtype Node'enum'group' = Node'enum'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'enum'group' where
    fromStruct = pure . Node'enum'group'
instance Codec.Capnp.IsPtr Node'enum'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'enum'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Node'enum'enumerants :: Data.Capnp.Untyped.ReadCtx m => Node'enum'group' -> m (Data.Capnp.Untyped.ListOf (Enumerant ))
get_Node'enum'enumerants (Node'enum'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'enum'enumerants :: Data.Capnp.Untyped.ReadCtx m => Node'enum'group' -> m Bool
has_Node'enum'enumerants(Node'enum'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
newtype Node'interface'group' = Node'interface'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'interface'group' where
    fromStruct = pure . Node'interface'group'
instance Codec.Capnp.IsPtr Node'interface'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'interface'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Node'interface'methods :: Data.Capnp.Untyped.ReadCtx m => Node'interface'group' -> m (Data.Capnp.Untyped.ListOf (Method ))
get_Node'interface'methods (Node'interface'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'interface'methods :: Data.Capnp.Untyped.ReadCtx m => Node'interface'group' -> m Bool
has_Node'interface'methods(Node'interface'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
get_Node'interface'superclasses :: Data.Capnp.Untyped.ReadCtx m => Node'interface'group' -> m (Data.Capnp.Untyped.ListOf (Superclass ))
get_Node'interface'superclasses (Node'interface'group' struct) =
    Data.Capnp.Untyped.getPtr 4 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'interface'superclasses :: Data.Capnp.Untyped.ReadCtx m => Node'interface'group' -> m Bool
has_Node'interface'superclasses(Node'interface'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 4 struct
newtype Node'const'group' = Node'const'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'const'group' where
    fromStruct = pure . Node'const'group'
instance Codec.Capnp.IsPtr Node'const'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'const'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Node'const'type_ :: Data.Capnp.Untyped.ReadCtx m => Node'const'group' -> m (Type )
get_Node'const'type_ (Node'const'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'const'type_ :: Data.Capnp.Untyped.ReadCtx m => Node'const'group' -> m Bool
has_Node'const'type_(Node'const'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
get_Node'const'value :: Data.Capnp.Untyped.ReadCtx m => Node'const'group' -> m (Value )
get_Node'const'value (Node'const'group' struct) =
    Data.Capnp.Untyped.getPtr 4 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'const'value :: Data.Capnp.Untyped.ReadCtx m => Node'const'group' -> m Bool
has_Node'const'value(Node'const'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 4 struct
newtype Node'annotation'group' = Node'annotation'group' Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Node'annotation'group' where
    fromStruct = pure . Node'annotation'group'
instance Codec.Capnp.IsPtr Node'annotation'group' where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node'annotation'group') where
    fromPtr = Codec.Capnp.structListPtr
get_Node'annotation'type_ :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m (Type )
get_Node'annotation'type_ (Node'annotation'group' struct) =
    Data.Capnp.Untyped.getPtr 3 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Node'annotation'type_ :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'type_(Node'annotation'group' struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 3 struct
get_Node'annotation'targetsFile :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsFile (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 48 0

has_Node'annotation'targetsFile :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsFile(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsConst :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsConst (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 49 0

has_Node'annotation'targetsConst :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsConst(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsEnum :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsEnum (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 50 0

has_Node'annotation'targetsEnum :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsEnum(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsEnumerant :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsEnumerant (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 51 0

has_Node'annotation'targetsEnumerant :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsEnumerant(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsStruct :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsStruct (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 52 0

has_Node'annotation'targetsStruct :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsStruct(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsField :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsField (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 53 0

has_Node'annotation'targetsField :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsField(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsUnion :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsUnion (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 54 0

has_Node'annotation'targetsUnion :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsUnion(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsGroup :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsGroup (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 55 0

has_Node'annotation'targetsGroup :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsGroup(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsInterface :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsInterface (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 56 0

has_Node'annotation'targetsInterface :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsInterface(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsMethod :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsMethod (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 57 0

has_Node'annotation'targetsMethod :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsMethod(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsParam :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsParam (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 58 0

has_Node'annotation'targetsParam :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsParam(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Node'annotation'targetsAnnotation :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
get_Node'annotation'targetsAnnotation (Node'annotation'group' struct) = Codec.Capnp.getWordField struct 1 59 0

has_Node'annotation'targetsAnnotation :: Data.Capnp.Untyped.ReadCtx m => Node'annotation'group' -> m Bool
has_Node'annotation'targetsAnnotation(Node'annotation'group' struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)

instance Codec.Capnp.IsStruct Node' where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 1 32 0
        case tag of
            5 -> Node'annotation <$> Codec.Capnp.fromStruct struct
            4 -> Node'const <$> Codec.Capnp.fromStruct struct
            3 -> Node'interface <$> Codec.Capnp.fromStruct struct
            2 -> Node'enum <$> Codec.Capnp.fromStruct struct
            1 -> Node'struct <$> Codec.Capnp.fromStruct struct
            0 -> pure Node'file
            _ -> pure $ Node'unknown' tag

instance Codec.Capnp.IsPtr Node' where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Node') where
    fromPtr = Codec.Capnp.structListPtr

newtype Annotation = Annotation Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Annotation where
    fromStruct = pure . Annotation
instance Codec.Capnp.IsPtr Annotation where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Annotation) where
    fromPtr = Codec.Capnp.structListPtr
get_Annotation'id :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m Word64
get_Annotation'id (Annotation struct) = Codec.Capnp.getWordField struct 0 0 0

has_Annotation'id :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m Bool
has_Annotation'id(Annotation struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Annotation'value :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m (Value )
get_Annotation'value (Annotation struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Annotation'value :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m Bool
has_Annotation'value(Annotation struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Annotation'brand :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m (Brand )
get_Annotation'brand (Annotation struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Annotation'brand :: Data.Capnp.Untyped.ReadCtx m => Annotation -> m Bool
has_Annotation'brand(Annotation struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
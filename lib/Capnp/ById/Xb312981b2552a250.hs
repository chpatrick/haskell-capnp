{-# OPTIONS_GHC -Wno-unused-imports #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
module Capnp.ById.Xb312981b2552a250 where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: capnp/rpc.capnp

import Data.Int
import Data.Word
import qualified Data.Bits
import qualified Data.Maybe
import qualified Codec.Capnp
import qualified Data.Capnp.BuiltinTypes
import qualified Data.Capnp.TraversalLimit
import qualified Data.Capnp.Untyped

import qualified Capnp.ById.Xbdf87d7bb8304e81

newtype Call = Call Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Call where
    fromStruct = pure . Call
instance Codec.Capnp.IsPtr Call where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Call) where
    fromPtr = Codec.Capnp.structListPtr
get_Call'questionId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Word32
get_Call'questionId (Call struct) = Codec.Capnp.getWordField struct 0 0 0

has_Call'questionId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'questionId(Call struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Call'target :: Data.Capnp.Untyped.ReadCtx m => Call -> m (MessageTarget )
get_Call'target (Call struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Call'target :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'target(Call struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Call'interfaceId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Word64
get_Call'interfaceId (Call struct) = Codec.Capnp.getWordField struct 1 0 0

has_Call'interfaceId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'interfaceId(Call struct) = pure $ 1 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Call'methodId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Word16
get_Call'methodId (Call struct) = Codec.Capnp.getWordField struct 0 32 0

has_Call'methodId :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'methodId(Call struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Call'params :: Data.Capnp.Untyped.ReadCtx m => Call -> m (Payload )
get_Call'params (Call struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Call'params :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'params(Call struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
get_Call'sendResultsTo :: Data.Capnp.Untyped.ReadCtx m => Call -> m (Call'sendResultsTo )
get_Call'sendResultsTo (Call struct) = Codec.Capnp.fromStruct struct

has_Call'sendResultsTo :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'sendResultsTo(Call struct) = pure True
get_Call'allowThirdPartyTailCall :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
get_Call'allowThirdPartyTailCall (Call struct) = Codec.Capnp.getWordField struct 2 0 0

has_Call'allowThirdPartyTailCall :: Data.Capnp.Untyped.ReadCtx m => Call -> m Bool
has_Call'allowThirdPartyTailCall(Call struct) = pure $ 2 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
data CapDescriptor
    = CapDescriptor'none
    | CapDescriptor'senderHosted Word32
    | CapDescriptor'senderPromise Word32
    | CapDescriptor'receiverHosted Word32
    | CapDescriptor'receiverAnswer (PromisedAnswer )
    | CapDescriptor'thirdPartyHosted (ThirdPartyCapDescriptor )
    | CapDescriptor'unknown' Word16







instance Codec.Capnp.IsStruct CapDescriptor where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            5 -> CapDescriptor'thirdPartyHosted <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            4 -> CapDescriptor'receiverAnswer <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            3 -> CapDescriptor'receiverHosted <$>  Codec.Capnp.getWordField struct 0 32 0
            2 -> CapDescriptor'senderPromise <$>  Codec.Capnp.getWordField struct 0 32 0
            1 -> CapDescriptor'senderHosted <$>  Codec.Capnp.getWordField struct 0 32 0
            0 -> pure CapDescriptor'none
            _ -> pure $ CapDescriptor'unknown' tag

instance Codec.Capnp.IsPtr CapDescriptor where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf CapDescriptor) where
    fromPtr = Codec.Capnp.structListPtr

data Message
    = Message'unimplemented (Message )
    | Message'abort (Exception )
    | Message'call (Call )
    | Message'return (Return )
    | Message'finish (Finish )
    | Message'resolve (Resolve )
    | Message'release (Release )
    | Message'obsoleteSave (Maybe Data.Capnp.Untyped.Ptr)
    | Message'bootstrap (Bootstrap )
    | Message'obsoleteDelete (Maybe Data.Capnp.Untyped.Ptr)
    | Message'provide (Provide )
    | Message'accept (Accept )
    | Message'join (Join )
    | Message'disembargo (Disembargo )
    | Message'unknown' Word16















instance Codec.Capnp.IsStruct Message where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            13 -> Message'disembargo <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            12 -> Message'join <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            11 -> Message'accept <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            10 -> Message'provide <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            9 -> Message'obsoleteDelete <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            8 -> Message'bootstrap <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            7 -> Message'obsoleteSave <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            6 -> Message'release <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            5 -> Message'resolve <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            4 -> Message'finish <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            3 -> Message'return <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            2 -> Message'call <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            1 -> Message'abort <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            0 -> Message'unimplemented <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            _ -> pure $ Message'unknown' tag

instance Codec.Capnp.IsPtr Message where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Message) where
    fromPtr = Codec.Capnp.structListPtr

data MessageTarget
    = MessageTarget'importedCap Word32
    | MessageTarget'promisedAnswer (PromisedAnswer )
    | MessageTarget'unknown' Word16



instance Codec.Capnp.IsStruct MessageTarget where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 32 0
        case tag of
            1 -> MessageTarget'promisedAnswer <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            0 -> MessageTarget'importedCap <$>  Codec.Capnp.getWordField struct 0 0 0
            _ -> pure $ MessageTarget'unknown' tag

instance Codec.Capnp.IsPtr MessageTarget where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf MessageTarget) where
    fromPtr = Codec.Capnp.structListPtr

newtype Payload = Payload Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Payload where
    fromStruct = pure . Payload
instance Codec.Capnp.IsPtr Payload where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Payload) where
    fromPtr = Codec.Capnp.structListPtr
get_Payload'content :: Data.Capnp.Untyped.ReadCtx m => Payload -> m (Maybe Data.Capnp.Untyped.Ptr)
get_Payload'content (Payload struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Payload'content :: Data.Capnp.Untyped.ReadCtx m => Payload -> m Bool
has_Payload'content(Payload struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Payload'capTable :: Data.Capnp.Untyped.ReadCtx m => Payload -> m (Data.Capnp.Untyped.ListOf (CapDescriptor ))
get_Payload'capTable (Payload struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Payload'capTable :: Data.Capnp.Untyped.ReadCtx m => Payload -> m Bool
has_Payload'capTable(Payload struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
newtype Provide = Provide Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Provide where
    fromStruct = pure . Provide
instance Codec.Capnp.IsPtr Provide where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Provide) where
    fromPtr = Codec.Capnp.structListPtr
get_Provide'questionId :: Data.Capnp.Untyped.ReadCtx m => Provide -> m Word32
get_Provide'questionId (Provide struct) = Codec.Capnp.getWordField struct 0 0 0

has_Provide'questionId :: Data.Capnp.Untyped.ReadCtx m => Provide -> m Bool
has_Provide'questionId(Provide struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Provide'target :: Data.Capnp.Untyped.ReadCtx m => Provide -> m (MessageTarget )
get_Provide'target (Provide struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Provide'target :: Data.Capnp.Untyped.ReadCtx m => Provide -> m Bool
has_Provide'target(Provide struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Provide'recipient :: Data.Capnp.Untyped.ReadCtx m => Provide -> m (Maybe Data.Capnp.Untyped.Ptr)
get_Provide'recipient (Provide struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Provide'recipient :: Data.Capnp.Untyped.ReadCtx m => Provide -> m Bool
has_Provide'recipient(Provide struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
newtype Return = Return Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Return where
    fromStruct = pure . Return
instance Codec.Capnp.IsPtr Return where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Return) where
    fromPtr = Codec.Capnp.structListPtr
get_Return''answerId :: Data.Capnp.Untyped.ReadCtx m => Return -> m Word32
get_Return''answerId (Return struct) = Codec.Capnp.getWordField struct 0 0 0

has_Return''answerId :: Data.Capnp.Untyped.ReadCtx m => Return -> m Bool
has_Return''answerId(Return struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Return''releaseParamCaps :: Data.Capnp.Untyped.ReadCtx m => Return -> m Bool
get_Return''releaseParamCaps (Return struct) = Codec.Capnp.getWordField struct 0 32 1

has_Return''releaseParamCaps :: Data.Capnp.Untyped.ReadCtx m => Return -> m Bool
has_Return''releaseParamCaps(Return struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Return''union' :: Data.Capnp.Untyped.ReadCtx m => Return -> m (Return' )
get_Return''union' (Return struct) = Codec.Capnp.fromStruct struct

has_Return''union' :: Data.Capnp.Untyped.ReadCtx m => Return -> m Bool
has_Return''union'(Return struct) = pure True
data Return'
    = Return'results (Payload )
    | Return'exception (Exception )
    | Return'canceled
    | Return'resultsSentElsewhere
    | Return'takeFromOtherQuestion Word32
    | Return'acceptFromThirdParty (Maybe Data.Capnp.Untyped.Ptr)
    | Return'unknown' Word16







instance Codec.Capnp.IsStruct Return' where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 48 0
        case tag of
            5 -> Return'acceptFromThirdParty <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            4 -> Return'takeFromOtherQuestion <$>  Codec.Capnp.getWordField struct 1 0 0
            3 -> pure Return'resultsSentElsewhere
            2 -> pure Return'canceled
            1 -> Return'exception <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            0 -> Return'results <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            _ -> pure $ Return'unknown' tag

instance Codec.Capnp.IsPtr Return' where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Return') where
    fromPtr = Codec.Capnp.structListPtr

newtype Release = Release Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Release where
    fromStruct = pure . Release
instance Codec.Capnp.IsPtr Release where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Release) where
    fromPtr = Codec.Capnp.structListPtr
get_Release'id :: Data.Capnp.Untyped.ReadCtx m => Release -> m Word32
get_Release'id (Release struct) = Codec.Capnp.getWordField struct 0 0 0

has_Release'id :: Data.Capnp.Untyped.ReadCtx m => Release -> m Bool
has_Release'id(Release struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Release'referenceCount :: Data.Capnp.Untyped.ReadCtx m => Release -> m Word32
get_Release'referenceCount (Release struct) = Codec.Capnp.getWordField struct 0 32 0

has_Release'referenceCount :: Data.Capnp.Untyped.ReadCtx m => Release -> m Bool
has_Release'referenceCount(Release struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
data Exception'Type
    = Exception'Type'failed
    | Exception'Type'overloaded
    | Exception'Type'disconnected
    | Exception'Type'unimplemented
    | Exception'Type'unknown' Word16
instance Enum Exception'Type where
    toEnum = Codec.Capnp.fromWord . fromIntegral
    fromEnum = fromIntegral . Codec.Capnp.toWord


instance Codec.Capnp.IsWord Exception'Type where
    fromWord n = go (fromIntegral n :: Word16)
      where
        go 3 = Exception'Type'unimplemented
        go 2 = Exception'Type'disconnected
        go 1 = Exception'Type'overloaded
        go 0 = Exception'Type'failed
        go tag = Exception'Type'unknown' (fromIntegral tag)
    toWord Exception'Type'unimplemented = 3
    toWord Exception'Type'disconnected = 2
    toWord Exception'Type'overloaded = 1
    toWord Exception'Type'failed = 0
    toWord (Exception'Type'unknown' tag) = fromIntegral tag
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Exception'Type) where
    fromPtr msg ptr = fmap
       (fmap (toEnum . (fromIntegral :: Word16 -> Int)))
       (Codec.Capnp.fromPtr msg ptr)

newtype Resolve = Resolve Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Resolve where
    fromStruct = pure . Resolve
instance Codec.Capnp.IsPtr Resolve where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Resolve) where
    fromPtr = Codec.Capnp.structListPtr
get_Resolve''promiseId :: Data.Capnp.Untyped.ReadCtx m => Resolve -> m Word32
get_Resolve''promiseId (Resolve struct) = Codec.Capnp.getWordField struct 0 0 0

has_Resolve''promiseId :: Data.Capnp.Untyped.ReadCtx m => Resolve -> m Bool
has_Resolve''promiseId(Resolve struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Resolve''union' :: Data.Capnp.Untyped.ReadCtx m => Resolve -> m (Resolve' )
get_Resolve''union' (Resolve struct) = Codec.Capnp.fromStruct struct

has_Resolve''union' :: Data.Capnp.Untyped.ReadCtx m => Resolve -> m Bool
has_Resolve''union'(Resolve struct) = pure True
data Resolve'
    = Resolve'cap (CapDescriptor )
    | Resolve'exception (Exception )
    | Resolve'unknown' Word16



instance Codec.Capnp.IsStruct Resolve' where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 32 0
        case tag of
            1 -> Resolve'exception <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            0 -> Resolve'cap <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            _ -> pure $ Resolve'unknown' tag

instance Codec.Capnp.IsPtr Resolve' where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Resolve') where
    fromPtr = Codec.Capnp.structListPtr

newtype ThirdPartyCapDescriptor = ThirdPartyCapDescriptor Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct ThirdPartyCapDescriptor where
    fromStruct = pure . ThirdPartyCapDescriptor
instance Codec.Capnp.IsPtr ThirdPartyCapDescriptor where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf ThirdPartyCapDescriptor) where
    fromPtr = Codec.Capnp.structListPtr
get_ThirdPartyCapDescriptor'id :: Data.Capnp.Untyped.ReadCtx m => ThirdPartyCapDescriptor -> m (Maybe Data.Capnp.Untyped.Ptr)
get_ThirdPartyCapDescriptor'id (ThirdPartyCapDescriptor struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_ThirdPartyCapDescriptor'id :: Data.Capnp.Untyped.ReadCtx m => ThirdPartyCapDescriptor -> m Bool
has_ThirdPartyCapDescriptor'id(ThirdPartyCapDescriptor struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_ThirdPartyCapDescriptor'vineId :: Data.Capnp.Untyped.ReadCtx m => ThirdPartyCapDescriptor -> m Word32
get_ThirdPartyCapDescriptor'vineId (ThirdPartyCapDescriptor struct) = Codec.Capnp.getWordField struct 0 0 0

has_ThirdPartyCapDescriptor'vineId :: Data.Capnp.Untyped.ReadCtx m => ThirdPartyCapDescriptor -> m Bool
has_ThirdPartyCapDescriptor'vineId(ThirdPartyCapDescriptor struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Finish = Finish Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Finish where
    fromStruct = pure . Finish
instance Codec.Capnp.IsPtr Finish where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Finish) where
    fromPtr = Codec.Capnp.structListPtr
get_Finish'questionId :: Data.Capnp.Untyped.ReadCtx m => Finish -> m Word32
get_Finish'questionId (Finish struct) = Codec.Capnp.getWordField struct 0 0 0

has_Finish'questionId :: Data.Capnp.Untyped.ReadCtx m => Finish -> m Bool
has_Finish'questionId(Finish struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Finish'releaseResultCaps :: Data.Capnp.Untyped.ReadCtx m => Finish -> m Bool
get_Finish'releaseResultCaps (Finish struct) = Codec.Capnp.getWordField struct 0 32 1

has_Finish'releaseResultCaps :: Data.Capnp.Untyped.ReadCtx m => Finish -> m Bool
has_Finish'releaseResultCaps(Finish struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype Accept = Accept Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Accept where
    fromStruct = pure . Accept
instance Codec.Capnp.IsPtr Accept where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Accept) where
    fromPtr = Codec.Capnp.structListPtr
get_Accept'questionId :: Data.Capnp.Untyped.ReadCtx m => Accept -> m Word32
get_Accept'questionId (Accept struct) = Codec.Capnp.getWordField struct 0 0 0

has_Accept'questionId :: Data.Capnp.Untyped.ReadCtx m => Accept -> m Bool
has_Accept'questionId(Accept struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Accept'provision :: Data.Capnp.Untyped.ReadCtx m => Accept -> m (Maybe Data.Capnp.Untyped.Ptr)
get_Accept'provision (Accept struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Accept'provision :: Data.Capnp.Untyped.ReadCtx m => Accept -> m Bool
has_Accept'provision(Accept struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Accept'embargo :: Data.Capnp.Untyped.ReadCtx m => Accept -> m Bool
get_Accept'embargo (Accept struct) = Codec.Capnp.getWordField struct 0 32 0

has_Accept'embargo :: Data.Capnp.Untyped.ReadCtx m => Accept -> m Bool
has_Accept'embargo(Accept struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
data Disembargo'context
    = Disembargo'context'senderLoopback Word32
    | Disembargo'context'receiverLoopback Word32
    | Disembargo'context'accept
    | Disembargo'context'provide Word32
    | Disembargo'context'unknown' Word16





instance Codec.Capnp.IsStruct Disembargo'context where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 32 0
        case tag of
            3 -> Disembargo'context'provide <$>  Codec.Capnp.getWordField struct 0 0 0
            2 -> pure Disembargo'context'accept
            1 -> Disembargo'context'receiverLoopback <$>  Codec.Capnp.getWordField struct 0 0 0
            0 -> Disembargo'context'senderLoopback <$>  Codec.Capnp.getWordField struct 0 0 0
            _ -> pure $ Disembargo'context'unknown' tag

instance Codec.Capnp.IsPtr Disembargo'context where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Disembargo'context) where
    fromPtr = Codec.Capnp.structListPtr

newtype Exception = Exception Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Exception where
    fromStruct = pure . Exception
instance Codec.Capnp.IsPtr Exception where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Exception) where
    fromPtr = Codec.Capnp.structListPtr
get_Exception'reason :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Data.Capnp.BuiltinTypes.Text
get_Exception'reason (Exception struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Exception'reason :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Bool
has_Exception'reason(Exception struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Exception'obsoleteIsCallersFault :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Bool
get_Exception'obsoleteIsCallersFault (Exception struct) = Codec.Capnp.getWordField struct 0 0 0

has_Exception'obsoleteIsCallersFault :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Bool
has_Exception'obsoleteIsCallersFault(Exception struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Exception'obsoleteDurability :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Word16
get_Exception'obsoleteDurability (Exception struct) = Codec.Capnp.getWordField struct 0 16 0

has_Exception'obsoleteDurability :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Bool
has_Exception'obsoleteDurability(Exception struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Exception'type_ :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Exception'Type
get_Exception'type_ (Exception struct) = Codec.Capnp.getWordField struct 0 32 0

has_Exception'type_ :: Data.Capnp.Untyped.ReadCtx m => Exception -> m Bool
has_Exception'type_(Exception struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
newtype PromisedAnswer = PromisedAnswer Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct PromisedAnswer where
    fromStruct = pure . PromisedAnswer
instance Codec.Capnp.IsPtr PromisedAnswer where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf PromisedAnswer) where
    fromPtr = Codec.Capnp.structListPtr
get_PromisedAnswer'questionId :: Data.Capnp.Untyped.ReadCtx m => PromisedAnswer -> m Word32
get_PromisedAnswer'questionId (PromisedAnswer struct) = Codec.Capnp.getWordField struct 0 0 0

has_PromisedAnswer'questionId :: Data.Capnp.Untyped.ReadCtx m => PromisedAnswer -> m Bool
has_PromisedAnswer'questionId(PromisedAnswer struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_PromisedAnswer'transform :: Data.Capnp.Untyped.ReadCtx m => PromisedAnswer -> m (Data.Capnp.Untyped.ListOf (PromisedAnswer'Op ))
get_PromisedAnswer'transform (PromisedAnswer struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_PromisedAnswer'transform :: Data.Capnp.Untyped.ReadCtx m => PromisedAnswer -> m Bool
has_PromisedAnswer'transform(PromisedAnswer struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
data Call'sendResultsTo
    = Call'sendResultsTo'caller
    | Call'sendResultsTo'yourself
    | Call'sendResultsTo'thirdParty (Maybe Data.Capnp.Untyped.Ptr)
    | Call'sendResultsTo'unknown' Word16




instance Codec.Capnp.IsStruct Call'sendResultsTo where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 48 0
        case tag of
            2 -> Call'sendResultsTo'thirdParty <$>  (Data.Capnp.Untyped.getPtr 2 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            1 -> pure Call'sendResultsTo'yourself
            0 -> pure Call'sendResultsTo'caller
            _ -> pure $ Call'sendResultsTo'unknown' tag

instance Codec.Capnp.IsPtr Call'sendResultsTo where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Call'sendResultsTo) where
    fromPtr = Codec.Capnp.structListPtr

newtype Bootstrap = Bootstrap Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Bootstrap where
    fromStruct = pure . Bootstrap
instance Codec.Capnp.IsPtr Bootstrap where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Bootstrap) where
    fromPtr = Codec.Capnp.structListPtr
get_Bootstrap'questionId :: Data.Capnp.Untyped.ReadCtx m => Bootstrap -> m Word32
get_Bootstrap'questionId (Bootstrap struct) = Codec.Capnp.getWordField struct 0 0 0

has_Bootstrap'questionId :: Data.Capnp.Untyped.ReadCtx m => Bootstrap -> m Bool
has_Bootstrap'questionId(Bootstrap struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Bootstrap'deprecatedObjectId :: Data.Capnp.Untyped.ReadCtx m => Bootstrap -> m (Maybe Data.Capnp.Untyped.Ptr)
get_Bootstrap'deprecatedObjectId (Bootstrap struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Bootstrap'deprecatedObjectId :: Data.Capnp.Untyped.ReadCtx m => Bootstrap -> m Bool
has_Bootstrap'deprecatedObjectId(Bootstrap struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
data PromisedAnswer'Op
    = PromisedAnswer'Op'noop
    | PromisedAnswer'Op'getPointerField Word16
    | PromisedAnswer'Op'unknown' Word16



instance Codec.Capnp.IsStruct PromisedAnswer'Op where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            1 -> PromisedAnswer'Op'getPointerField <$>  Codec.Capnp.getWordField struct 0 16 0
            0 -> pure PromisedAnswer'Op'noop
            _ -> pure $ PromisedAnswer'Op'unknown' tag

instance Codec.Capnp.IsPtr PromisedAnswer'Op where
    fromPtr = Codec.Capnp.structPtr
instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf PromisedAnswer'Op) where
    fromPtr = Codec.Capnp.structListPtr

newtype Disembargo = Disembargo Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Disembargo where
    fromStruct = pure . Disembargo
instance Codec.Capnp.IsPtr Disembargo where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Disembargo) where
    fromPtr = Codec.Capnp.structListPtr
get_Disembargo'target :: Data.Capnp.Untyped.ReadCtx m => Disembargo -> m (MessageTarget )
get_Disembargo'target (Disembargo struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Disembargo'target :: Data.Capnp.Untyped.ReadCtx m => Disembargo -> m Bool
has_Disembargo'target(Disembargo struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Disembargo'context :: Data.Capnp.Untyped.ReadCtx m => Disembargo -> m (Disembargo'context )
get_Disembargo'context (Disembargo struct) = Codec.Capnp.fromStruct struct

has_Disembargo'context :: Data.Capnp.Untyped.ReadCtx m => Disembargo -> m Bool
has_Disembargo'context(Disembargo struct) = pure True
newtype Join = Join Data.Capnp.Untyped.Struct

instance Codec.Capnp.IsStruct Join where
    fromStruct = pure . Join
instance Codec.Capnp.IsPtr Join where
    fromPtr = Codec.Capnp.structPtr

instance Codec.Capnp.IsPtr (Data.Capnp.Untyped.ListOf Join) where
    fromPtr = Codec.Capnp.structListPtr
get_Join'questionId :: Data.Capnp.Untyped.ReadCtx m => Join -> m Word32
get_Join'questionId (Join struct) = Codec.Capnp.getWordField struct 0 0 0

has_Join'questionId :: Data.Capnp.Untyped.ReadCtx m => Join -> m Bool
has_Join'questionId(Join struct) = pure $ 0 < Data.Capnp.Untyped.length (Data.Capnp.Untyped.dataSection struct)
get_Join'target :: Data.Capnp.Untyped.ReadCtx m => Join -> m (MessageTarget )
get_Join'target (Join struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Join'target :: Data.Capnp.Untyped.ReadCtx m => Join -> m Bool
has_Join'target(Join struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_Join'keyPart :: Data.Capnp.Untyped.ReadCtx m => Join -> m (Maybe Data.Capnp.Untyped.Ptr)
get_Join'keyPart (Join struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_Join'keyPart :: Data.Capnp.Untyped.ReadCtx m => Join -> m Bool
has_Join'keyPart(Join struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
{-# OPTIONS_GHC -Wno-unused-imports #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DataKinds #-}
module Capnp.Capnp.Persistent where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: capnp/persistent.capnp

import Data.Int
import Data.Word

import GHC.OverloadedLabels

import qualified Data.Capnp as DC'
import Data.Capnp.Bits (Word1)

import qualified Data.Bits
import qualified Data.Maybe
import qualified Codec.Capnp as C'
import qualified Data.Capnp.Basics as B'
import qualified Data.Capnp.TraversalLimit as TL'
import qualified Data.Capnp.Untyped as U'
import qualified Data.Capnp.Message as M'

import qualified Capnp.ById.Xbdf87d7bb8304e81

newtype Persistent'SaveResults msg = Persistent'SaveResults (U'.Struct msg)

instance C'.IsStruct msg (Persistent'SaveResults msg) where
    fromStruct = pure . Persistent'SaveResults
instance C'.IsPtr msg (Persistent'SaveResults msg) where
    fromPtr msg ptr = Persistent'SaveResults <$> C'.fromPtr msg ptr
    toPtr (Persistent'SaveResults struct) = C'.toPtr struct
instance B'.ListElem msg (Persistent'SaveResults msg) where
    newtype List msg (Persistent'SaveResults msg) = List_Persistent'SaveResults (U'.ListOf msg (U'.Struct msg))
    length (List_Persistent'SaveResults l) = U'.length l
    index i (List_Persistent'SaveResults l) = U'.index i l >>= (let {go :: U'.ReadCtx m msg => U'.Struct msg -> m (Persistent'SaveResults msg); go = C'.fromStruct} in go)
instance B'.MutListElem s (Persistent'SaveResults (M'.MutMsg s)) where
    setIndex (Persistent'SaveResults elt) i (List_Persistent'SaveResults l) = U'.setIndex elt i l
    allocList msg len = List_Persistent'SaveResults <$> U'.allocCompositeList msg 0 1 len
instance U'.HasMessage (Persistent'SaveResults msg) msg where
    message (Persistent'SaveResults struct) = U'.message struct
instance U'.MessageDefault (Persistent'SaveResults msg) msg where
    messageDefault = Persistent'SaveResults . U'.messageDefault

-- | Allocate a new 'Persistent'SaveResults' inside the message.
new_Persistent'SaveResults :: M'.WriteCtx m s => M'.MutMsg s -> m (Persistent'SaveResults (M'.MutMsg s))
new_Persistent'SaveResults msg = Persistent'SaveResults <$> U'.allocStruct msg 0 1
instance C'.IsPtr msg (B'.List msg (Persistent'SaveResults msg)) where
    fromPtr msg ptr = List_Persistent'SaveResults <$> C'.fromPtr msg ptr
    toPtr (List_Persistent'SaveResults l) = C'.toPtr l
get_Persistent'SaveResults'sturdyRef :: U'.ReadCtx m msg => Persistent'SaveResults msg -> m (Maybe (U'.Ptr msg))
get_Persistent'SaveResults'sturdyRef (Persistent'SaveResults struct) =
    U'.getPtr 0 struct
    >>= C'.fromPtr (U'.message struct)

instance U'.ReadCtx m msg => IsLabel "sturdyRef" (DC'.Get m (Persistent'SaveResults msg) ((Maybe (U'.Ptr msg)))) where
    fromLabel = DC'.Get get_Persistent'SaveResults'sturdyRef

has_Persistent'SaveResults'sturdyRef :: U'.ReadCtx m msg => Persistent'SaveResults msg -> m Bool
has_Persistent'SaveResults'sturdyRef(Persistent'SaveResults struct) = Data.Maybe.isJust <$> U'.getPtr 0 struct
instance U'.ReadCtx m msg => IsLabel "sturdyRef" (DC'.Has m (Persistent'SaveResults msg)) where
    fromLabel = DC'.Has has_Persistent'SaveResults'sturdyRef

set_Persistent'SaveResults'sturdyRef :: (U'.ReadCtx m (M'.MutMsg s), M'.WriteCtx m s) => Persistent'SaveResults (M'.MutMsg s) -> (Maybe (U'.Ptr (M'.MutMsg s))) -> m ()
set_Persistent'SaveResults'sturdyRef (Persistent'SaveResults struct) value = U'.setPtr (C'.toPtr value) 0 struct

instance (U'.ReadCtx m (M'.MutMsg s), M'.WriteCtx m s) => IsLabel "sturdyRef" (DC'.Set m (Persistent'SaveResults (M'.MutMsg s)) ((Maybe (U'.Ptr (M'.MutMsg s))))) where
    fromLabel = DC'.Set set_Persistent'SaveResults'sturdyRef


newtype Persistent'SaveParams msg = Persistent'SaveParams (U'.Struct msg)

instance C'.IsStruct msg (Persistent'SaveParams msg) where
    fromStruct = pure . Persistent'SaveParams
instance C'.IsPtr msg (Persistent'SaveParams msg) where
    fromPtr msg ptr = Persistent'SaveParams <$> C'.fromPtr msg ptr
    toPtr (Persistent'SaveParams struct) = C'.toPtr struct
instance B'.ListElem msg (Persistent'SaveParams msg) where
    newtype List msg (Persistent'SaveParams msg) = List_Persistent'SaveParams (U'.ListOf msg (U'.Struct msg))
    length (List_Persistent'SaveParams l) = U'.length l
    index i (List_Persistent'SaveParams l) = U'.index i l >>= (let {go :: U'.ReadCtx m msg => U'.Struct msg -> m (Persistent'SaveParams msg); go = C'.fromStruct} in go)
instance B'.MutListElem s (Persistent'SaveParams (M'.MutMsg s)) where
    setIndex (Persistent'SaveParams elt) i (List_Persistent'SaveParams l) = U'.setIndex elt i l
    allocList msg len = List_Persistent'SaveParams <$> U'.allocCompositeList msg 0 1 len
instance U'.HasMessage (Persistent'SaveParams msg) msg where
    message (Persistent'SaveParams struct) = U'.message struct
instance U'.MessageDefault (Persistent'SaveParams msg) msg where
    messageDefault = Persistent'SaveParams . U'.messageDefault

-- | Allocate a new 'Persistent'SaveParams' inside the message.
new_Persistent'SaveParams :: M'.WriteCtx m s => M'.MutMsg s -> m (Persistent'SaveParams (M'.MutMsg s))
new_Persistent'SaveParams msg = Persistent'SaveParams <$> U'.allocStruct msg 0 1
instance C'.IsPtr msg (B'.List msg (Persistent'SaveParams msg)) where
    fromPtr msg ptr = List_Persistent'SaveParams <$> C'.fromPtr msg ptr
    toPtr (List_Persistent'SaveParams l) = C'.toPtr l
get_Persistent'SaveParams'sealFor :: U'.ReadCtx m msg => Persistent'SaveParams msg -> m (Maybe (U'.Ptr msg))
get_Persistent'SaveParams'sealFor (Persistent'SaveParams struct) =
    U'.getPtr 0 struct
    >>= C'.fromPtr (U'.message struct)

instance U'.ReadCtx m msg => IsLabel "sealFor" (DC'.Get m (Persistent'SaveParams msg) ((Maybe (U'.Ptr msg)))) where
    fromLabel = DC'.Get get_Persistent'SaveParams'sealFor

has_Persistent'SaveParams'sealFor :: U'.ReadCtx m msg => Persistent'SaveParams msg -> m Bool
has_Persistent'SaveParams'sealFor(Persistent'SaveParams struct) = Data.Maybe.isJust <$> U'.getPtr 0 struct
instance U'.ReadCtx m msg => IsLabel "sealFor" (DC'.Has m (Persistent'SaveParams msg)) where
    fromLabel = DC'.Has has_Persistent'SaveParams'sealFor

set_Persistent'SaveParams'sealFor :: (U'.ReadCtx m (M'.MutMsg s), M'.WriteCtx m s) => Persistent'SaveParams (M'.MutMsg s) -> (Maybe (U'.Ptr (M'.MutMsg s))) -> m ()
set_Persistent'SaveParams'sealFor (Persistent'SaveParams struct) value = U'.setPtr (C'.toPtr value) 0 struct

instance (U'.ReadCtx m (M'.MutMsg s), M'.WriteCtx m s) => IsLabel "sealFor" (DC'.Set m (Persistent'SaveParams (M'.MutMsg s)) ((Maybe (U'.Ptr (M'.MutMsg s))))) where
    fromLabel = DC'.Set set_Persistent'SaveParams'sealFor


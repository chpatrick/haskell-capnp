{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
{- |
Module: Capnp.Capnp.Rpc.Pure
Description: High-level generated module for capnp/rpc.capnp

This module is the generated code for capnp/rpc.capnp,
for the high-level api.
-}
module Capnp.Capnp.Rpc.Pure (Accept(..), Bootstrap(..), Call(..), CapDescriptor(..), Disembargo(..), Exception(..), Finish(..), Join(..), Message(..), MessageTarget(..), Payload(..), PromisedAnswer(..), Provide(..), Release(..), Resolve(..), Return(..), ThirdPartyCapDescriptor(..), Call'sendResultsTo(..), Disembargo'context(..), Capnp.ById.Xb312981b2552a250.Exception'Type(..), PromisedAnswer'Op(..), Resolve'(..), Return'(..)
) where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: capnp/rpc.capnp

import Data.Int
import Data.Word

import Data.Capnp.Untyped.Pure (List)
import Data.Capnp.Basics.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow)
import Data.Capnp.TraversalLimit (MonadLimit)

import qualified Data.Capnp.Message as M'
import qualified Data.Capnp.Untyped.Pure as PU'
import qualified Codec.Capnp as C'

import qualified Capnp.ById.Xb312981b2552a250
import qualified Capnp.ById.Xbdf87d7bb8304e81.Pure
import qualified Capnp.ById.Xbdf87d7bb8304e81

data Accept
    = Accept
        { questionId :: Word32
        , provision :: Maybe (PU'.PtrType)
        , embargo :: Bool
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Accept M'.ConstMsg) Accept where
    decerialize raw = Accept
                <$> (Capnp.ById.Xb312981b2552a250.get_Accept'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Accept'provision raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Accept'embargo raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Accept where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Accept M'.ConstMsg)

instance C'.Cerialize s Accept (Capnp.ById.Xb312981b2552a250.Accept (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Accept{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Accept'questionId raw questionId
                pure ()
                Capnp.ById.Xb312981b2552a250.set_Accept'embargo raw embargo
data Bootstrap
    = Bootstrap
        { questionId :: Word32
        , deprecatedObjectId :: Maybe (PU'.PtrType)
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Bootstrap M'.ConstMsg) Bootstrap where
    decerialize raw = Bootstrap
                <$> (Capnp.ById.Xb312981b2552a250.get_Bootstrap'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Bootstrap'deprecatedObjectId raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Bootstrap where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Bootstrap M'.ConstMsg)

instance C'.Cerialize s Bootstrap (Capnp.ById.Xb312981b2552a250.Bootstrap (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Bootstrap{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Bootstrap'questionId raw questionId
                pure ()
data Call
    = Call
        { questionId :: Word32
        , target :: MessageTarget
        , interfaceId :: Word64
        , methodId :: Word16
        , params :: Payload
        , sendResultsTo :: Call'sendResultsTo
        , allowThirdPartyTailCall :: Bool
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Call M'.ConstMsg) Call where
    decerialize raw = Call
                <$> (Capnp.ById.Xb312981b2552a250.get_Call'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'target raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'interfaceId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'methodId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'params raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'sendResultsTo raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Call'allowThirdPartyTailCall raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Call where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Call M'.ConstMsg)

instance C'.Cerialize s Call (Capnp.ById.Xb312981b2552a250.Call (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Call{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Call'questionId raw questionId
                pure ()
                Capnp.ById.Xb312981b2552a250.set_Call'interfaceId raw interfaceId
                Capnp.ById.Xb312981b2552a250.set_Call'methodId raw methodId
                pure ()
                pure ()
                Capnp.ById.Xb312981b2552a250.set_Call'allowThirdPartyTailCall raw allowThirdPartyTailCall
data CapDescriptor
    = CapDescriptor'none
    | CapDescriptor'senderHosted (Word32)
    | CapDescriptor'senderPromise (Word32)
    | CapDescriptor'receiverHosted (Word32)
    | CapDescriptor'receiverAnswer (PromisedAnswer)
    | CapDescriptor'thirdPartyHosted (ThirdPartyCapDescriptor)
    | CapDescriptor'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.CapDescriptor M'.ConstMsg) CapDescriptor where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_CapDescriptor' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.CapDescriptor'none -> pure CapDescriptor'none
            Capnp.ById.Xb312981b2552a250.CapDescriptor'senderHosted val -> CapDescriptor'senderHosted <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.CapDescriptor'senderPromise val -> CapDescriptor'senderPromise <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.CapDescriptor'receiverHosted val -> CapDescriptor'receiverHosted <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.CapDescriptor'receiverAnswer val -> CapDescriptor'receiverAnswer <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.CapDescriptor'thirdPartyHosted val -> CapDescriptor'thirdPartyHosted <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.CapDescriptor'unknown' val -> CapDescriptor'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg CapDescriptor where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.CapDescriptor M'.ConstMsg)

instance C'.Cerialize s CapDescriptor (Capnp.ById.Xb312981b2552a250.CapDescriptor (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            CapDescriptor'none -> Capnp.ById.Xb312981b2552a250.set_CapDescriptor'none raw
            CapDescriptor'senderHosted _ -> pure ()
            CapDescriptor'senderPromise _ -> pure ()
            CapDescriptor'receiverHosted _ -> pure ()
            CapDescriptor'receiverAnswer _ -> pure ()
            CapDescriptor'thirdPartyHosted _ -> pure ()
            CapDescriptor'unknown' _ -> pure ()
data Disembargo
    = Disembargo
        { target :: MessageTarget
        , context :: Disembargo'context
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Disembargo M'.ConstMsg) Disembargo where
    decerialize raw = Disembargo
                <$> (Capnp.ById.Xb312981b2552a250.get_Disembargo'target raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Disembargo'context raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Disembargo where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Disembargo M'.ConstMsg)

instance C'.Cerialize s Disembargo (Capnp.ById.Xb312981b2552a250.Disembargo (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Disembargo{..} -> do
                pure ()
                pure ()
data Exception
    = Exception
        { reason :: Text
        , obsoleteIsCallersFault :: Bool
        , obsoleteDurability :: Word16
        , type_ :: Capnp.ById.Xb312981b2552a250.Exception'Type
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Exception M'.ConstMsg) Exception where
    decerialize raw = Exception
                <$> (Capnp.ById.Xb312981b2552a250.get_Exception'reason raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Exception'obsoleteIsCallersFault raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Exception'obsoleteDurability raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Exception'type_ raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Exception where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Exception M'.ConstMsg)

instance C'.Cerialize s Exception (Capnp.ById.Xb312981b2552a250.Exception (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Exception{..} -> do
                pure ()
                Capnp.ById.Xb312981b2552a250.set_Exception'obsoleteIsCallersFault raw obsoleteIsCallersFault
                Capnp.ById.Xb312981b2552a250.set_Exception'obsoleteDurability raw obsoleteDurability
                Capnp.ById.Xb312981b2552a250.set_Exception'type_ raw type_
data Finish
    = Finish
        { questionId :: Word32
        , releaseResultCaps :: Bool
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Finish M'.ConstMsg) Finish where
    decerialize raw = Finish
                <$> (Capnp.ById.Xb312981b2552a250.get_Finish'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Finish'releaseResultCaps raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Finish where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Finish M'.ConstMsg)

instance C'.Cerialize s Finish (Capnp.ById.Xb312981b2552a250.Finish (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Finish{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Finish'questionId raw questionId
                Capnp.ById.Xb312981b2552a250.set_Finish'releaseResultCaps raw releaseResultCaps
data Join
    = Join
        { questionId :: Word32
        , target :: MessageTarget
        , keyPart :: Maybe (PU'.PtrType)
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Join M'.ConstMsg) Join where
    decerialize raw = Join
                <$> (Capnp.ById.Xb312981b2552a250.get_Join'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Join'target raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Join'keyPart raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Join where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Join M'.ConstMsg)

instance C'.Cerialize s Join (Capnp.ById.Xb312981b2552a250.Join (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Join{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Join'questionId raw questionId
                pure ()
                pure ()
data Message
    = Message'unimplemented (Message)
    | Message'abort (Exception)
    | Message'call (Call)
    | Message'return (Return)
    | Message'finish (Finish)
    | Message'resolve (Resolve)
    | Message'release (Release)
    | Message'obsoleteSave (Maybe (PU'.PtrType))
    | Message'bootstrap (Bootstrap)
    | Message'obsoleteDelete (Maybe (PU'.PtrType))
    | Message'provide (Provide)
    | Message'accept (Accept)
    | Message'join (Join)
    | Message'disembargo (Disembargo)
    | Message'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Message M'.ConstMsg) Message where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_Message' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.Message'unimplemented val -> Message'unimplemented <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'abort val -> Message'abort <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'call val -> Message'call <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'return val -> Message'return <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'finish val -> Message'finish <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'resolve val -> Message'resolve <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'release val -> Message'release <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'obsoleteSave val -> Message'obsoleteSave <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'bootstrap val -> Message'bootstrap <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'obsoleteDelete val -> Message'obsoleteDelete <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'provide val -> Message'provide <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'accept val -> Message'accept <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'join val -> Message'join <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'disembargo val -> Message'disembargo <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Message'unknown' val -> Message'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg Message where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Message M'.ConstMsg)

instance C'.Cerialize s Message (Capnp.ById.Xb312981b2552a250.Message (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Message'unimplemented _ -> pure ()
            Message'abort _ -> pure ()
            Message'call _ -> pure ()
            Message'return _ -> pure ()
            Message'finish _ -> pure ()
            Message'resolve _ -> pure ()
            Message'release _ -> pure ()
            Message'obsoleteSave _ -> pure ()
            Message'bootstrap _ -> pure ()
            Message'obsoleteDelete _ -> pure ()
            Message'provide _ -> pure ()
            Message'accept _ -> pure ()
            Message'join _ -> pure ()
            Message'disembargo _ -> pure ()
            Message'unknown' _ -> pure ()
data MessageTarget
    = MessageTarget'importedCap (Word32)
    | MessageTarget'promisedAnswer (PromisedAnswer)
    | MessageTarget'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.MessageTarget M'.ConstMsg) MessageTarget where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_MessageTarget' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.MessageTarget'importedCap val -> MessageTarget'importedCap <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.MessageTarget'promisedAnswer val -> MessageTarget'promisedAnswer <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.MessageTarget'unknown' val -> MessageTarget'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg MessageTarget where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.MessageTarget M'.ConstMsg)

instance C'.Cerialize s MessageTarget (Capnp.ById.Xb312981b2552a250.MessageTarget (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            MessageTarget'importedCap _ -> pure ()
            MessageTarget'promisedAnswer _ -> pure ()
            MessageTarget'unknown' _ -> pure ()
data Payload
    = Payload
        { content :: Maybe (PU'.PtrType)
        , capTable :: List (CapDescriptor)
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Payload M'.ConstMsg) Payload where
    decerialize raw = Payload
                <$> (Capnp.ById.Xb312981b2552a250.get_Payload'content raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Payload'capTable raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Payload where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Payload M'.ConstMsg)

instance C'.Cerialize s Payload (Capnp.ById.Xb312981b2552a250.Payload (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Payload{..} -> do
                pure ()
                pure ()
data PromisedAnswer
    = PromisedAnswer
        { questionId :: Word32
        , transform :: List (PromisedAnswer'Op)
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.PromisedAnswer M'.ConstMsg) PromisedAnswer where
    decerialize raw = PromisedAnswer
                <$> (Capnp.ById.Xb312981b2552a250.get_PromisedAnswer'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_PromisedAnswer'transform raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg PromisedAnswer where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.PromisedAnswer M'.ConstMsg)

instance C'.Cerialize s PromisedAnswer (Capnp.ById.Xb312981b2552a250.PromisedAnswer (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            PromisedAnswer{..} -> do
                Capnp.ById.Xb312981b2552a250.set_PromisedAnswer'questionId raw questionId
                pure ()
data Provide
    = Provide
        { questionId :: Word32
        , target :: MessageTarget
        , recipient :: Maybe (PU'.PtrType)
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Provide M'.ConstMsg) Provide where
    decerialize raw = Provide
                <$> (Capnp.ById.Xb312981b2552a250.get_Provide'questionId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Provide'target raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Provide'recipient raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Provide where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Provide M'.ConstMsg)

instance C'.Cerialize s Provide (Capnp.ById.Xb312981b2552a250.Provide (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Provide{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Provide'questionId raw questionId
                pure ()
                pure ()
data Release
    = Release
        { id :: Word32
        , referenceCount :: Word32
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Release M'.ConstMsg) Release where
    decerialize raw = Release
                <$> (Capnp.ById.Xb312981b2552a250.get_Release'id raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Release'referenceCount raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Release where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Release M'.ConstMsg)

instance C'.Cerialize s Release (Capnp.ById.Xb312981b2552a250.Release (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Release{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Release'id raw id
                Capnp.ById.Xb312981b2552a250.set_Release'referenceCount raw referenceCount
data Resolve
    = Resolve
        { promiseId :: Word32
        , union' :: Resolve'
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Resolve M'.ConstMsg) Resolve where
    decerialize raw = Resolve
                <$> (Capnp.ById.Xb312981b2552a250.get_Resolve'promiseId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Resolve'union' raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Resolve where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Resolve M'.ConstMsg)

instance C'.Cerialize s Resolve (Capnp.ById.Xb312981b2552a250.Resolve (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Resolve{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Resolve'promiseId raw promiseId
                pure ()
data Return
    = Return
        { answerId :: Word32
        , releaseParamCaps :: Bool
        , union' :: Return'
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Return M'.ConstMsg) Return where
    decerialize raw = Return
                <$> (Capnp.ById.Xb312981b2552a250.get_Return'answerId raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Return'releaseParamCaps raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_Return'union' raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg Return where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Return M'.ConstMsg)

instance C'.Cerialize s Return (Capnp.ById.Xb312981b2552a250.Return (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Return{..} -> do
                Capnp.ById.Xb312981b2552a250.set_Return'answerId raw answerId
                Capnp.ById.Xb312981b2552a250.set_Return'releaseParamCaps raw releaseParamCaps
                pure ()
data ThirdPartyCapDescriptor
    = ThirdPartyCapDescriptor
        { id :: Maybe (PU'.PtrType)
        , vineId :: Word32
        }
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.ThirdPartyCapDescriptor M'.ConstMsg) ThirdPartyCapDescriptor where
    decerialize raw = ThirdPartyCapDescriptor
                <$> (Capnp.ById.Xb312981b2552a250.get_ThirdPartyCapDescriptor'id raw >>= C'.decerialize)
                <*> (Capnp.ById.Xb312981b2552a250.get_ThirdPartyCapDescriptor'vineId raw >>= C'.decerialize)

instance C'.IsStruct M'.ConstMsg ThirdPartyCapDescriptor where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.ThirdPartyCapDescriptor M'.ConstMsg)

instance C'.Cerialize s ThirdPartyCapDescriptor (Capnp.ById.Xb312981b2552a250.ThirdPartyCapDescriptor (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            ThirdPartyCapDescriptor{..} -> do
                pure ()
                Capnp.ById.Xb312981b2552a250.set_ThirdPartyCapDescriptor'vineId raw vineId
data Call'sendResultsTo
    = Call'sendResultsTo'caller
    | Call'sendResultsTo'yourself
    | Call'sendResultsTo'thirdParty (Maybe (PU'.PtrType))
    | Call'sendResultsTo'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Call'sendResultsTo M'.ConstMsg) Call'sendResultsTo where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_Call'sendResultsTo' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.Call'sendResultsTo'caller -> pure Call'sendResultsTo'caller
            Capnp.ById.Xb312981b2552a250.Call'sendResultsTo'yourself -> pure Call'sendResultsTo'yourself
            Capnp.ById.Xb312981b2552a250.Call'sendResultsTo'thirdParty val -> Call'sendResultsTo'thirdParty <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Call'sendResultsTo'unknown' val -> Call'sendResultsTo'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg Call'sendResultsTo where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Call'sendResultsTo M'.ConstMsg)

instance C'.Cerialize s Call'sendResultsTo (Capnp.ById.Xb312981b2552a250.Call'sendResultsTo (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Call'sendResultsTo'caller -> Capnp.ById.Xb312981b2552a250.set_Call'sendResultsTo'caller raw
            Call'sendResultsTo'yourself -> Capnp.ById.Xb312981b2552a250.set_Call'sendResultsTo'yourself raw
            Call'sendResultsTo'thirdParty _ -> pure ()
            Call'sendResultsTo'unknown' _ -> pure ()
data Disembargo'context
    = Disembargo'context'senderLoopback (Word32)
    | Disembargo'context'receiverLoopback (Word32)
    | Disembargo'context'accept
    | Disembargo'context'provide (Word32)
    | Disembargo'context'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Disembargo'context M'.ConstMsg) Disembargo'context where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_Disembargo'context' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.Disembargo'context'senderLoopback val -> Disembargo'context'senderLoopback <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Disembargo'context'receiverLoopback val -> Disembargo'context'receiverLoopback <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Disembargo'context'accept -> pure Disembargo'context'accept
            Capnp.ById.Xb312981b2552a250.Disembargo'context'provide val -> Disembargo'context'provide <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Disembargo'context'unknown' val -> Disembargo'context'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg Disembargo'context where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Disembargo'context M'.ConstMsg)

instance C'.Cerialize s Disembargo'context (Capnp.ById.Xb312981b2552a250.Disembargo'context (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Disembargo'context'senderLoopback _ -> pure ()
            Disembargo'context'receiverLoopback _ -> pure ()
            Disembargo'context'accept -> Capnp.ById.Xb312981b2552a250.set_Disembargo'context'accept raw
            Disembargo'context'provide _ -> pure ()
            Disembargo'context'unknown' _ -> pure ()
instance C'.Decerialize Capnp.ById.Xb312981b2552a250.Exception'Type Capnp.ById.Xb312981b2552a250.Exception'Type where
     decerialize = pure
data PromisedAnswer'Op
    = PromisedAnswer'Op'noop
    | PromisedAnswer'Op'getPointerField (Word16)
    | PromisedAnswer'Op'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op M'.ConstMsg) PromisedAnswer'Op where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_PromisedAnswer'Op' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op'noop -> pure PromisedAnswer'Op'noop
            Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op'getPointerField val -> PromisedAnswer'Op'getPointerField <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op'unknown' val -> PromisedAnswer'Op'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg PromisedAnswer'Op where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op M'.ConstMsg)

instance C'.Cerialize s PromisedAnswer'Op (Capnp.ById.Xb312981b2552a250.PromisedAnswer'Op (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            PromisedAnswer'Op'noop -> Capnp.ById.Xb312981b2552a250.set_PromisedAnswer'Op'noop raw
            PromisedAnswer'Op'getPointerField _ -> pure ()
            PromisedAnswer'Op'unknown' _ -> pure ()
data Resolve'
    = Resolve'cap (CapDescriptor)
    | Resolve'exception (Exception)
    | Resolve'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Resolve' M'.ConstMsg) Resolve' where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_Resolve'' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.Resolve'cap val -> Resolve'cap <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Resolve'exception val -> Resolve'exception <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Resolve'unknown' val -> Resolve'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg Resolve' where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Resolve' M'.ConstMsg)

instance C'.Cerialize s Resolve' (Capnp.ById.Xb312981b2552a250.Resolve' (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Resolve'cap _ -> pure ()
            Resolve'exception _ -> pure ()
            Resolve'unknown' _ -> pure ()
data Return'
    = Return'results (Payload)
    | Return'exception (Exception)
    | Return'canceled
    | Return'resultsSentElsewhere
    | Return'takeFromOtherQuestion (Word32)
    | Return'acceptFromThirdParty (Maybe (PU'.PtrType))
    | Return'unknown' (Word16)
    deriving(Show, Read, Eq)

instance C'.Decerialize (Capnp.ById.Xb312981b2552a250.Return' M'.ConstMsg) Return' where
    decerialize raw = do
        raw <- Capnp.ById.Xb312981b2552a250.get_Return'' raw
        case raw of
            Capnp.ById.Xb312981b2552a250.Return'results val -> Return'results <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Return'exception val -> Return'exception <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Return'canceled -> pure Return'canceled
            Capnp.ById.Xb312981b2552a250.Return'resultsSentElsewhere -> pure Return'resultsSentElsewhere
            Capnp.ById.Xb312981b2552a250.Return'takeFromOtherQuestion val -> Return'takeFromOtherQuestion <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Return'acceptFromThirdParty val -> Return'acceptFromThirdParty <$> C'.decerialize val
            Capnp.ById.Xb312981b2552a250.Return'unknown' val -> Return'unknown' <$> C'.decerialize val

instance C'.IsStruct M'.ConstMsg Return' where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xb312981b2552a250.Return' M'.ConstMsg)

instance C'.Cerialize s Return' (Capnp.ById.Xb312981b2552a250.Return' (M'.MutMsg s)) where
    marshalInto raw value = do
        case value of
            Return'results _ -> pure ()
            Return'exception _ -> pure ()
            Return'canceled -> Capnp.ById.Xb312981b2552a250.set_Return'canceled raw
            Return'resultsSentElsewhere -> Capnp.ById.Xb312981b2552a250.set_Return'resultsSentElsewhere raw
            Return'takeFromOtherQuestion _ -> pure ()
            Return'acceptFromThirdParty _ -> pure ()
            Return'unknown' _ -> pure ()

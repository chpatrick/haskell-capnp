{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
module Data.Capnp.Schema.Capnp.Persistent where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: schema/capnp/persistent.capnp

import Data.Int
import Data.Word

import Data.Capnp.Untyped.Pure (List)
import Data.Capnp.BuiltinTypes.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow)
import Data.Capnp.TraversalLimit (MonadLimit)

import qualified Data.Capnp.Untyped.Pure
import qualified Data.Capnp.Untyped
import qualified Codec.Capnp

import Data.ByteString as BS

import qualified Data.Capnp.ById.Xb8630836983feed7
import qualified Data.Capnp.ById.Xbdf87d7bb8304e81.Pure
import qualified Data.Capnp.ById.Xbdf87d7bb8304e81

data Persistent'SaveResults
    = Persistent'SaveResults
        { sturdyRef :: Maybe (Data.Capnp.Untyped.Pure.PtrType)
        }
    deriving(Show, Read, Eq)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.Decerialize m (Data.Capnp.ById.Xb8630836983feed7.Persistent'SaveResults m BS.ByteString) Persistent'SaveResults where
    decerialize raw = Persistent'SaveResults
            <$> (Data.Capnp.ById.Xb8630836983feed7.get_Persistent'SaveResults'sturdyRef raw >>= Codec.Capnp.decerialize)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.IsStruct m Persistent'SaveResults BS.ByteString where
    fromStruct struct = do
        raw <- Codec.Capnp.fromStruct struct
        Codec.Capnp.decerialize (raw :: Data.Capnp.ById.Xb8630836983feed7.Persistent'SaveResults m BS.ByteString)

data Persistent'SaveParams
    = Persistent'SaveParams
        { sealFor :: Maybe (Data.Capnp.Untyped.Pure.PtrType)
        }
    deriving(Show, Read, Eq)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.Decerialize m (Data.Capnp.ById.Xb8630836983feed7.Persistent'SaveParams m BS.ByteString) Persistent'SaveParams where
    decerialize raw = Persistent'SaveParams
            <$> (Data.Capnp.ById.Xb8630836983feed7.get_Persistent'SaveParams'sealFor raw >>= Codec.Capnp.decerialize)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.IsStruct m Persistent'SaveParams BS.ByteString where
    fromStruct struct = do
        raw <- Codec.Capnp.fromStruct struct
        Codec.Capnp.decerialize (raw :: Data.Capnp.ById.Xb8630836983feed7.Persistent'SaveParams m BS.ByteString)


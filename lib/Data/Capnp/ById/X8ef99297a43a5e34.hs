{-# OPTIONS_GHC -Wno-unused-imports #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE KindSignatures #-}
module Data.Capnp.ById.X8ef99297a43a5e34 where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: /usr/include/capnp/json.capnp

import Data.Int
import Data.Word
import qualified Data.Bits
import qualified Data.Maybe
import qualified Codec.Capnp
import qualified Data.Capnp.BuiltinTypes
import qualified Data.Capnp.TraversalLimit
import qualified Data.Capnp.Untyped

import qualified Data.Capnp.ById.Xbdf87d7bb8304e81

data JsonValue (m :: * -> *) b
    = JsonValue'null
    | JsonValue'boolean Bool
    | JsonValue'number Double
    | JsonValue'string (Data.Capnp.BuiltinTypes.Text b)
    | JsonValue'array (Data.Capnp.Untyped.ListOf m b (JsonValue m b))
    | JsonValue'object (Data.Capnp.Untyped.ListOf m b (JsonValue'Field m b))
    | JsonValue'call (JsonValue'Call m b)
    | JsonValue'unknown' Word16








instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsStruct m (JsonValue m b) b where
    fromStruct struct = do
        tag <-  Codec.Capnp.getWordField struct 0 0 0
        case tag of
            6 -> JsonValue'call <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            5 -> JsonValue'object <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            4 -> JsonValue'array <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            3 -> JsonValue'string <$>  (Data.Capnp.Untyped.getPtr 0 struct >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct))
            2 -> JsonValue'number <$>  Codec.Capnp.getWordField struct 1 0 0
            1 -> JsonValue'boolean <$>  Codec.Capnp.getWordField struct 0 16 0
            0 -> pure JsonValue'null
            _ -> pure $ JsonValue'unknown' tag

instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (JsonValue m b) b where
    fromPtr = Codec.Capnp.structPtr
instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (Data.Capnp.Untyped.ListOf m b (JsonValue m b)) b where
    fromPtr = Codec.Capnp.structListPtr

newtype JsonValue'Call (m :: * -> *) b = JsonValue'Call (Data.Capnp.Untyped.Struct m b)

instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsStruct m (JsonValue'Call m b) b where
    fromStruct = pure . JsonValue'Call
instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (JsonValue'Call m b) b where
    fromPtr = Codec.Capnp.structPtr

instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (Data.Capnp.Untyped.ListOf m b (JsonValue'Call m b)) b where
    fromPtr = Codec.Capnp.structListPtr
get_JsonValue'Call'function :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Call m b -> m (Data.Capnp.BuiltinTypes.Text b)
get_JsonValue'Call'function (JsonValue'Call struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_JsonValue'Call'function :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Call m b -> m Bool
has_JsonValue'Call'function(JsonValue'Call struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_JsonValue'Call'params :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Call m b -> m (Data.Capnp.Untyped.ListOf m b (JsonValue m b))
get_JsonValue'Call'params (JsonValue'Call struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_JsonValue'Call'params :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Call m b -> m Bool
has_JsonValue'Call'params(JsonValue'Call struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
newtype JsonValue'Field (m :: * -> *) b = JsonValue'Field (Data.Capnp.Untyped.Struct m b)

instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsStruct m (JsonValue'Field m b) b where
    fromStruct = pure . JsonValue'Field
instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (JsonValue'Field m b) b where
    fromPtr = Codec.Capnp.structPtr

instance Data.Capnp.Untyped.ReadCtx m b => Codec.Capnp.IsPtr m (Data.Capnp.Untyped.ListOf m b (JsonValue'Field m b)) b where
    fromPtr = Codec.Capnp.structListPtr
get_JsonValue'Field'name :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Field m b -> m (Data.Capnp.BuiltinTypes.Text b)
get_JsonValue'Field'name (JsonValue'Field struct) =
    Data.Capnp.Untyped.getPtr 0 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_JsonValue'Field'name :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Field m b -> m Bool
has_JsonValue'Field'name(JsonValue'Field struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 0 struct
get_JsonValue'Field'value :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Field m b -> m (JsonValue m b)
get_JsonValue'Field'value (JsonValue'Field struct) =
    Data.Capnp.Untyped.getPtr 1 struct
    >>= Codec.Capnp.fromPtr (Data.Capnp.Untyped.message struct)


has_JsonValue'Field'value :: Data.Capnp.Untyped.ReadCtx m b => JsonValue'Field m b -> m Bool
has_JsonValue'Field'value(JsonValue'Field struct) = Data.Maybe.isJust <$> Data.Capnp.Untyped.getPtr 1 struct
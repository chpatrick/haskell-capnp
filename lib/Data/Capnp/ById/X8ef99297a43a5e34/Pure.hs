{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
module Data.Capnp.ById.X8ef99297a43a5e34.Pure where

-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: schema/capnp/json.capnp

import Data.Int
import Data.Word

import Data.Capnp.Untyped.Pure (List)
import Data.Capnp.BuiltinTypes.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow)
import Data.Capnp.TraversalLimit (MonadLimit)

import qualified Data.Capnp.Untyped.Pure
import qualified Data.Capnp.Untyped
import qualified Codec.Capnp

import Data.ByteString as BS

import qualified Data.Capnp.ById.X8ef99297a43a5e34
import qualified Data.Capnp.ById.Xbdf87d7bb8304e81.Pure
import qualified Data.Capnp.ById.Xbdf87d7bb8304e81

data JsonValue
    = JsonValue'null
    | JsonValue'boolean (Bool)
    | JsonValue'number (Double)
    | JsonValue'string (Text)
    | JsonValue'array (List (JsonValue))
    | JsonValue'object (List (JsonValue'Field))
    | JsonValue'call (JsonValue'Call)
    | JsonValue'unknown' (Word16)
    deriving(Show, Read, Eq)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.Decerialize m (Data.Capnp.ById.X8ef99297a43a5e34.JsonValue m BS.ByteString) JsonValue where
    decerialize raw = case raw of

        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'null -> pure JsonValue'null
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'boolean val -> JsonValue'boolean <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'number val -> JsonValue'number <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'string val -> JsonValue'string <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'array val -> JsonValue'array <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'object val -> JsonValue'object <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'call val -> JsonValue'call <$> Codec.Capnp.decerialize val
        Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'unknown' val -> JsonValue'unknown' <$> Codec.Capnp.decerialize val

data JsonValue'Call
    = JsonValue'Call
        { function :: Text
        , params :: List (JsonValue)
        }
    deriving(Show, Read, Eq)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.Decerialize m (Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'Call m BS.ByteString) JsonValue'Call where
    decerialize raw = JsonValue'Call
            <$> (Data.Capnp.ById.X8ef99297a43a5e34.get_JsonValue'Call'function raw >>= Codec.Capnp.decerialize)
            <*> (Data.Capnp.ById.X8ef99297a43a5e34.get_JsonValue'Call'params raw >>= Codec.Capnp.decerialize)

data JsonValue'Field
    = JsonValue'Field
        { name :: Text
        , value :: JsonValue
        }
    deriving(Show, Read, Eq)

instance (MonadThrow m, MonadLimit m) => Codec.Capnp.Decerialize m (Data.Capnp.ById.X8ef99297a43a5e34.JsonValue'Field m BS.ByteString) JsonValue'Field where
    decerialize raw = JsonValue'Field
            <$> (Data.Capnp.ById.X8ef99297a43a5e34.get_JsonValue'Field'name raw >>= Codec.Capnp.decerialize)
            <*> (Data.Capnp.ById.X8ef99297a43a5e34.get_JsonValue'Field'value raw >>= Codec.Capnp.decerialize)

